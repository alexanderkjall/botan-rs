use crate::utils::*;
use botan_sys::*;

use crate::mp::MPI;
use crate::pk_ops::*;
use crate::rng::RandomNumberGenerator;

#[derive(Debug)]
/// A public key object
pub struct Pubkey {
    obj: botan_pubkey_t,
}

unsafe impl Sync for Pubkey {}
unsafe impl Send for Pubkey {}

botan_impl_drop!(Pubkey, botan_pubkey_destroy);

#[derive(Debug)]
/// A private key object
pub struct Privkey {
    obj: botan_privkey_t,
}

unsafe impl Sync for Privkey {}
unsafe impl Send for Privkey {}

botan_impl_drop!(Privkey, botan_privkey_destroy);

impl Privkey {
    pub(crate) fn handle(&self) -> botan_privkey_t {
        self.obj
    }

    /// Create a new private key
    ///
    pub fn create(alg: &str, params: &str, rng: &mut RandomNumberGenerator) -> Result<Privkey> {
        let obj = botan_init!(
            botan_privkey_create,
            make_cstr(alg)?.as_ptr(),
            make_cstr(params)?.as_ptr(),
            rng.handle()
        )?;

        Ok(Privkey { obj })
    }

    /// Create a new ElGamal private key with a random group
    pub fn create_elgamal(
        p_bits: usize,
        q_bits: usize,
        rng: &mut RandomNumberGenerator,
    ) -> Result<Self> {
        let obj = botan_init!(botan_privkey_create_elgamal, rng.handle(), p_bits, q_bits)?;

        Ok(Self { obj })
    }

    /// Create a new DSA private key with a random group
    pub fn create_dsa(
        p_bits: usize,
        q_bits: usize,
        rng: &mut RandomNumberGenerator,
    ) -> Result<Self> {
        let obj = botan_init!(botan_privkey_create_dsa, rng.handle(), p_bits, q_bits)?;

        Ok(Self { obj })
    }

    /// Load an RSA private key (p,q,e)
    ///
    /// # Examples
    ///
    /// ```
    /// use std::str::FromStr;
    /// let p = botan::MPI::from_str("289698020102256958291511331409682926199").unwrap();
    /// let q = botan::MPI::from_str("293497288893125842977275290547344412783").unwrap();
    /// let e = botan::MPI::from_str("65537").unwrap();
    /// let rsa = botan::Privkey::load_rsa(&p, &q, &e).unwrap();
    /// ```
    pub fn load_rsa(p: &MPI, q: &MPI, e: &MPI) -> Result<Privkey> {
        let obj = botan_init!(botan_privkey_load_rsa, p.handle(), q.handle(), e.handle())?;
        Ok(Privkey { obj })
    }

    /// Load an Ed25519 private key
    ///
    /// # Examples
    ///
    /// ```
    /// let v = vec![0x42; 32];
    /// let key = botan::Privkey::load_ed25519(&v).unwrap();
    /// ```
    pub fn load_ed25519(key: &[u8]) -> Result<Privkey> {
        let obj = botan_init!(botan_privkey_load_ed25519, key.as_ptr())?;
        Ok(Privkey { obj })
    }

    /// Load an X25519 private key
    ///
    /// # Examples
    ///
    /// ```
    /// let v = vec![0x42; 32];
    /// let key = botan::Privkey::load_x25519(&v).unwrap();
    /// ```
    pub fn load_x25519(key: &[u8]) -> Result<Privkey> {
        let obj = botan_init!(botan_privkey_load_x25519, key.as_ptr())?;
        Ok(Privkey { obj })
    }

    #[cfg(feature = "botan3")]
    /// Load a kyber private key
    ///
    /// # Examples
    ///
    /// ```
    /// let v = vec![0x42; 1632];
    /// let key512 = botan::Privkey::load_kyber(&v).unwrap();
    /// ```
    /// ```
    /// let v = vec![0x42; 2400];
    /// let key768 = botan::Privkey::load_kyber(&v).unwrap();
    /// ```
    /// ```
    /// let v = vec![0x42; 3168];
    /// let key1024 = botan::Privkey::load_kyber(&v).unwrap();
    /// ```
    ///
    /// Loading a key with the wrong size will cause an error to be returned.
    ///
    /// ```should_panic
    /// let v = vec![0x42; 1631];
    /// let key512 = botan::Privkey::load_kyber(&v).unwrap();
    /// ```
    pub fn load_kyber(key: &[u8]) -> Result<Privkey> {
        let obj = botan_init!(botan_privkey_load_kyber, key.as_ptr(), key.len())?;
        Ok(Privkey { obj })
    }

    /// Load a PKCS#1 encoded RSA private key
    pub fn load_rsa_pkcs1(pkcs1: &[u8]) -> Result<Privkey> {
        let obj = botan_init!(botan_privkey_load_rsa_pkcs1, pkcs1.as_ptr(), pkcs1.len())?;
        Ok(Privkey { obj })
    }

    /// Load an DH private key (p,g,x)
    pub fn load_dh(p: &MPI, g: &MPI, x: &MPI) -> Result<Privkey> {
        let obj = botan_init!(botan_privkey_load_dh, p.handle(), g.handle(), x.handle())?;
        Ok(Privkey { obj })
    }

    /// Load an DSA private key (p,q,g,x)
    pub fn load_dsa(p: &MPI, q: &MPI, g: &MPI, x: &MPI) -> Result<Privkey> {
        let obj = botan_init!(
            botan_privkey_load_dsa,
            p.handle(),
            q.handle(),
            g.handle(),
            x.handle()
        )?;
        Ok(Privkey { obj })
    }

    /// Load an ElGamal private key (p,g,x)
    pub fn load_elgamal(p: &MPI, g: &MPI, x: &MPI) -> Result<Privkey> {
        let obj = botan_init!(
            botan_privkey_load_elgamal,
            p.handle(),
            g.handle(),
            x.handle()
        )?;
        Ok(Privkey { obj })
    }

    /// Load an ECDSA private key with specified curve and secret scalar
    pub fn load_ecdsa(s: &MPI, curve_name: &str) -> Result<Privkey> {
        let curve_name = make_cstr(curve_name)?;
        let obj = botan_init!(botan_privkey_load_ecdsa, s.handle(), curve_name.as_ptr())?;
        Ok(Privkey { obj })
    }

    /// Load an ECDH private key with specified curve and secret scalar
    pub fn load_ecdh(s: &MPI, curve_name: &str) -> Result<Privkey> {
        let curve_name = make_cstr(curve_name)?;
        let obj = botan_init!(botan_privkey_load_ecdh, s.handle(), curve_name.as_ptr())?;
        Ok(Privkey { obj })
    }

    /// Load DER bytes as an unencrypted PKCS#8 private key
    pub fn load_der(der: &[u8]) -> Result<Privkey> {
        let obj = botan_init!(
            botan_privkey_load,
            ptr::null_mut(),
            der.as_ptr(),
            der.len(),
            ptr::null()
        )?;
        Ok(Privkey { obj })
    }

    /// Load PEM string as an unencrypted PKCS#8 private key
    pub fn load_pem(pem: &str) -> Result<Privkey> {
        let cpem = make_cstr(pem)?;
        let obj = botan_init!(
            botan_privkey_load,
            ptr::null_mut(),
            cpem.as_ptr() as *const u8,
            pem.len(),
            ptr::null()
        )?;

        Ok(Privkey { obj })
    }

    /// Load DER bytes as an encrypted PKCS#8 private key
    pub fn load_encrypted_der(der: &[u8], passphrase: &str) -> Result<Privkey> {
        let passphrase = make_cstr(passphrase)?;
        let obj = botan_init!(
            botan_privkey_load,
            ptr::null_mut(),
            der.as_ptr(),
            der.len(),
            passphrase.as_ptr()
        )?;
        Ok(Privkey { obj })
    }

    /// Load PEM string as an encrypted PKCS#8 private key
    pub fn load_encrypted_pem(pem: &str, passphrase: &str) -> Result<Privkey> {
        let passphrase = make_cstr(passphrase)?;
        let cpem = make_cstr(pem)?;
        let obj = botan_init!(
            botan_privkey_load,
            ptr::null_mut(),
            cpem.as_ptr() as *const u8,
            pem.len(),
            passphrase.as_ptr()
        )?;

        Ok(Privkey { obj })
    }

    /// Check if the key seems to be valid
    pub fn check_key(&self, rng: &mut RandomNumberGenerator) -> Result<bool> {
        let flags = 1u32;
        let rc = unsafe { botan_privkey_check_key(self.obj, rng.handle(), flags) };

        if rc == 0 {
            Ok(true)
        } else if rc == -1 {
            Ok(false)
        } else {
            Err(Error::from_rc(rc))
        }
    }

    /// Return the public key associated with this private key
    pub fn pubkey(&self) -> Result<Pubkey> {
        let obj = botan_init!(botan_privkey_export_pubkey, self.obj)?;
        Ok(Pubkey { obj })
    }

    /// Return the name of the algorithm
    pub fn algo_name(&self) -> Result<String> {
        call_botan_ffi_returning_string(32, &|out_buf, out_len| unsafe {
            botan_privkey_algo_name(self.obj, out_buf as *mut c_char, out_len)
        })
    }

    /// DER encode the key (unencrypted)
    pub fn der_encode(&self) -> Result<Vec<u8>> {
        #[cfg(feature = "botan3")]
        {
            call_botan_ffi_viewing_vec_u8(&|ctx, cb| unsafe {
                botan_privkey_view_der(self.obj, ctx, cb)
            })
        }

        #[cfg(not(feature = "botan3"))]
        {
            call_botan_ffi_returning_vec_u8(4096, &|out_buf, out_len| unsafe {
                botan_privkey_export(self.obj, out_buf, out_len, 0u32)
            })
        }
    }

    /// PEM encode the private key (unencrypted)
    pub fn pem_encode(&self) -> Result<String> {
        #[cfg(feature = "botan3")]
        {
            call_botan_ffi_viewing_str_fn(&|ctx, cb| unsafe {
                botan_privkey_view_pem(self.obj, ctx, cb)
            })
        }

        #[cfg(not(feature = "botan3"))]
        {
            call_botan_ffi_returning_string(4096, &|out_buf, out_len| unsafe {
                botan_privkey_export(self.obj, out_buf, out_len, 1u32)
            })
        }
    }

    /// DER encode the key (encrypted)
    pub fn der_encode_encrypted(
        &self,
        passphrase: &str,
        rng: &mut RandomNumberGenerator,
    ) -> Result<Vec<u8>> {
        let iterations = 150_000;
        self.der_encode_encrypted_with_options(
            passphrase,
            "AES-256/CBC",
            "SHA-512",
            iterations,
            rng,
        )
    }

    /// DER encode the key (encrypted), specifying cipher/hash options
    pub fn der_encode_encrypted_with_options(
        &self,
        passphrase: &str,
        cipher: &str,
        pbkdf: &str,
        pbkdf_iter: usize,
        rng: &mut RandomNumberGenerator,
    ) -> Result<Vec<u8>> {
        let passphrase = make_cstr(passphrase)?;
        let cipher = make_cstr(cipher)?;
        let pbkdf = make_cstr(pbkdf)?;

        let rng_handle = rng.handle();

        #[cfg(feature = "botan3")]
        {
            call_botan_ffi_viewing_vec_u8(&|ctx, cb| unsafe {
                botan_privkey_view_encrypted_der(
                    self.obj,
                    rng_handle,
                    passphrase.as_ptr(),
                    cipher.as_ptr(),
                    pbkdf.as_ptr(),
                    pbkdf_iter,
                    ctx,
                    cb,
                )
            })
        }

        #[cfg(not(feature = "botan3"))]
        {
            call_botan_ffi_returning_vec_u8(4096, &|out_buf, out_len| unsafe {
                botan_privkey_export_encrypted_pbkdf_iter(
                    self.obj,
                    out_buf,
                    out_len,
                    rng_handle,
                    passphrase.as_ptr(),
                    pbkdf_iter,
                    cipher.as_ptr(),
                    pbkdf.as_ptr(),
                    0u32,
                )
            })
        }
    }

    /// PEM encode the key (encrypted)
    pub fn pem_encode_encrypted(
        &self,
        passphrase: &str,
        rng: &mut RandomNumberGenerator,
    ) -> Result<String> {
        let iterations = 150_000;
        self.pem_encode_encrypted_with_options(
            passphrase,
            "AES-256/CBC",
            "SHA-512",
            iterations,
            rng,
        )
    }

    /// PEM encode the key (encrypted), specifying cipher/hash options
    pub fn pem_encode_encrypted_with_options(
        &self,
        passphrase: &str,
        cipher: &str,
        pbkdf: &str,
        pbkdf_iter: usize,
        rng: &mut RandomNumberGenerator,
    ) -> Result<String> {
        let passphrase = make_cstr(passphrase)?;
        let cipher = make_cstr(cipher)?;
        let pbkdf = make_cstr(pbkdf)?;
        let rng_handle = rng.handle();

        #[cfg(feature = "botan3")]
        {
            call_botan_ffi_viewing_str_fn(&|ctx, cb| unsafe {
                botan_privkey_view_encrypted_pem(
                    self.obj,
                    rng_handle,
                    passphrase.as_ptr(),
                    cipher.as_ptr(),
                    pbkdf.as_ptr(),
                    pbkdf_iter,
                    ctx,
                    cb,
                )
            })
        }

        #[cfg(not(feature = "botan3"))]
        {
            call_botan_ffi_returning_string(4096, &|out_buf, out_len| unsafe {
                botan_privkey_export_encrypted_pbkdf_iter(
                    self.obj,
                    out_buf,
                    out_len,
                    rng_handle,
                    passphrase.as_ptr(),
                    pbkdf_iter,
                    cipher.as_ptr(),
                    pbkdf.as_ptr(),
                    1u32,
                )
            })
        }
    }

    /// Return the key agrement key, only valid for DH/ECDH
    pub fn key_agreement_key(&self) -> Result<Vec<u8>> {
        #[cfg(feature = "botan3")]
        {
            call_botan_ffi_viewing_vec_u8(&|ctx, cb| unsafe {
                botan_pk_op_key_agreement_view_public(self.obj, ctx, cb)
            })
        }

        #[cfg(not(feature = "botan3"))]
        {
            let ka_key_len = 512; // fixme
            call_botan_ffi_returning_vec_u8(ka_key_len, &|out_buf, out_len| unsafe {
                botan_pk_op_key_agreement_export_public(self.obj, out_buf, out_len)
            })
        }
    }

    /// Get a value for the private key
    /// The which parameter selects a field which is algorithm specific
    pub fn get_field(&self, which: &str) -> Result<MPI> {
        let which = make_cstr(which)?;

        let r = MPI::new()?;
        botan_call!(
            botan_privkey_get_field,
            r.handle(),
            self.obj,
            which.as_ptr()
        )?;
        Ok(r)
    }

    /// Get the public and private key associated with this key
    pub fn get_ed25519_key(&self) -> Result<(Vec<u8>, Vec<u8>)> {
        let mut out = vec![0; 64];
        botan_call!(
            botan_privkey_ed25519_get_privkey,
            self.obj,
            out.as_mut_ptr()
        )?;
        let pubkey = out.split_off(32);

        Ok((pubkey, out))
    }

    /// Get the X25519 private key
    pub fn get_x25519_key(&self) -> Result<Vec<u8>> {
        let mut out = vec![0; 32];
        botan_call!(botan_privkey_x25519_get_privkey, self.obj, out.as_mut_ptr())?;
        Ok(out)
    }

    #[cfg(feature = "botan3")]
    /// Get the Kyber private key
    ///
    /// # Examples
    ///
    /// ```
    /// let v = vec![0xd6, 0xec, 0xcd, 0x63, 0x5a, 0x4f, 0x19, 0xd8, 0x02, 0x56, 0xbc, 0x9c, 0xa3, 0xc2, 0x3d, 0xeb, 0x78, 0x3e, 0x2e, 0x16, 0x93, 0x7e, 0xa1, 0x51, 0xe1, 0x36, 0x64, 0x8d, 0xb4, 0xcf, 0xa1, 0x73, 0xc6, 0x18, 0x55, 0x2b, 0x57, 0x22, 0x1c, 0xe3, 0xe4, 0x32, 0x44, 0xd0, 0x78, 0xf5, 0xc7, 0x7a, 0x47, 0xb1, 0xa2, 0x7b, 0x23, 0xbc, 0x7a, 0xfc, 0x2b, 0x0a, 0x79, 0x91, 0xcf, 0x5a, 0x0a, 0x8e, 0x71, 0x2c, 0xbd, 0x9c, 0x2f, 0x41, 0x25, 0x0a, 0x6b, 0xeb, 0x7c, 0xac, 0x3b, 0xc0, 0xe4, 0x2b, 0xb4, 0x46, 0xf3, 0x51, 0x1f, 0x8a, 0x36, 0x9b, 0x60, 0x82, 0xba, 0x44, 0x77, 0x30, 0x5c, 0xca, 0xad, 0x98, 0x64, 0xbc, 0x3a, 0x4a, 0x15, 0xa6, 0x49, 0x56, 0x44, 0x36, 0x80, 0x28, 0xa4, 0x59, 0x7b, 0xa7, 0x8c, 0xb2, 0x7a, 0x86, 0xe6, 0x43, 0x33, 0x89, 0x0f, 0x27, 0x83, 0xa8, 0x20, 0x2a, 0x3f, 0xa0, 0x18, 0xb1, 0x00, 0xd1, 0xcb, 0xc4, 0x96, 0x22, 0xe1, 0x6a, 0x81, 0x8a, 0x68, 0x1d, 0x24, 0x2a, 0x96, 0x4f, 0xf8, 0x85, 0x9b, 0x63, 0x7b, 0x59, 0xa0, 0x47, 0xf4, 0x0c, 0xcc, 0xd5, 0xd6, 0x67, 0x70, 0xc0, 0x8f, 0xb2, 0xb2, 0xc2, 0xeb, 0x53, 0x8c, 0x6c, 0xd2, 0x30, 0xb7, 0x92, 0x44, 0x8e, 0xe4, 0xac, 0xbe, 0xbb, 0xc7, 0xff, 0x57, 0xa7, 0x98, 0xb2, 0x96, 0xb5, 0x96, 0xc8, 0x58, 0xe8, 0x57, 0x60, 0xf9, 0x6e, 0x8e, 0xb0, 0xca, 0xc1, 0x38, 0x0c, 0xfa, 0x20, 0x02, 0x4d, 0x4a, 0xaa, 0x56, 0xc4, 0x80, 0x31, 0xe4, 0x76, 0x7f, 0xc5, 0x44, 0xd9, 0x82, 0xa7, 0x2d, 0x13, 0x5f, 0x56, 0xc2, 0x4d, 0x5e, 0x15, 0x7f, 0xda, 0xe2, 0x40, 0x10, 0xc3, 0xb8, 0xa6, 0xc2, 0x6a, 0x2f, 0x87, 0x13, 0xe8, 0x27, 0x11, 0xf1, 0x38, 0x90, 0x6b, 0x02, 0x0d, 0x8e, 0xf4, 0xa2, 0x67, 0x6b, 0x16, 0x21, 0xfb, 0x38, 0xc9, 0x56, 0x55, 0x12, 0x25, 0x9c, 0x6d, 0x9c, 0xa5, 0x4f, 0x64, 0xcf, 0x5f, 0x4b, 0x08, 0x60, 0xeb, 0x01, 0x6c, 0xac, 0xa6, 0x00, 0x7d, 0xb7, 0x9e, 0x58, 0x90, 0xd9, 0xda, 0x87, 0x4b, 0xf3, 0x0b, 0xc5, 0x3b, 0xba, 0x3d, 0xe1, 0x7e, 0xcf, 0x48, 0xc5, 0x2d, 0xd0, 0x28, 0xe9, 0x2b, 0xb4, 0xed, 0xd7, 0x5e, 0xc1, 0xb9, 0x52, 0xfe, 0xd5, 0x96, 0xe1, 0xbb, 0x15, 0x07, 0xb3, 0x64, 0x4f, 0x95, 0x6e, 0xd4, 0xe8, 0xc3, 0x52, 0xb6, 0x1e, 0xdc, 0x74, 0x0f, 0xce, 0xe6, 0x5c, 0xd9, 0x07, 0x55, 0x25, 0x62, 0xa3, 0x1b, 0xb6, 0x89, 0x8f, 0x0c, 0x17, 0xbc, 0xf8, 0x94, 0x53, 0x7b, 0x94, 0xd6, 0xc1, 0x8f, 0x27, 0x0a, 0x9b, 0x8b, 0x76, 0x0a, 0x5b, 0xe2, 0x9b, 0xa4, 0xe6, 0x1f, 0x9a, 0x08, 0x73, 0x45, 0x93, 0x51, 0x17, 0x43, 0x30, 0xc7, 0xa8, 0x63, 0xb6, 0xd7, 0x88, 0xc4, 0x89, 0x5b, 0xb6, 0x20, 0x58, 0xb8, 0xd5, 0x98, 0x2f, 0xe5, 0x25, 0xf8, 0x87, 0x44, 0xbf, 0xa8, 0x7f, 0x3b, 0xf2, 0x23, 0xa9, 0x67, 0x67, 0x4d, 0x96, 0x01, 0xf2, 0x2c, 0x02, 0x2a, 0x14, 0x9b, 0xdf, 0xc4, 0x5b, 0xee, 0x55, 0x89, 0xa8, 0x02, 0x99, 0x68, 0x76, 0x47, 0x1c, 0x36, 0xab, 0x6f, 0xa3, 0x1e, 0xec, 0x30, 0xb4, 0x32, 0x4a, 0xa5, 0xa0, 0x3c, 0xb2, 0x9f, 0x93, 0x73, 0x8e, 0x75, 0x19, 0xb1, 0xeb, 0x39, 0xb6, 0x9b, 0x70, 0x92, 0xa9, 0x59, 0x0f, 0xca, 0x87, 0x89, 0x97, 0x8a, 0x61, 0x51, 0x1d, 0xf5, 0xab, 0x7f, 0x38, 0x80, 0x42, 0x55, 0x62, 0x51, 0x51, 0x03, 0x4e, 0x75, 0x24, 0x4c, 0x7c, 0xf4, 0x6a, 0x41, 0xe2, 0xa7, 0x44, 0x70, 0x15, 0xc4, 0x10, 0x96, 0x83, 0x71, 0x42, 0x71, 0xfc, 0xb9, 0x7f, 0xe8, 0xa1, 0xc2, 0x59, 0x4f, 0x88, 0x61, 0x61, 0xf5, 0xc3, 0x6d, 0x02, 0x2b, 0xc4, 0x3c, 0x69, 0x2a, 0xde, 0x56, 0x89, 0x3b, 0x33, 0x41, 0xe6, 0x3a, 0x01, 0xda, 0x87, 0x04, 0x52, 0xfb, 0x71, 0x29, 0xcc, 0xa4, 0x29, 0x6a, 0x6f, 0xab, 0x49, 0xbc, 0x9e, 0x55, 0x1a, 0xd4, 0x0a, 0xb3, 0x06, 0x7c, 0x67, 0x93, 0x62, 0xc3, 0xe3, 0xc5, 0x31, 0x91, 0xfa, 0x77, 0xe7, 0x53, 0xca, 0x69, 0xc0, 0x92, 0xda, 0xd3, 0x00, 0x32, 0xd6, 0x65, 0xa2, 0x37, 0xce, 0x55, 0xf1, 0x04, 0x40, 0x50, 0xc1, 0x00, 0x0b, 0x82, 0x91, 0xc1, 0x4b, 0x3f, 0xca, 0x50, 0x08, 0x35, 0x71, 0x1b, 0xc5, 0x3d, 0xf2, 0x75, 0x99, 0x64, 0x20, 0x89, 0x2f, 0xac, 0x8a, 0x20, 0x86, 0x83, 0x43, 0x2c, 0x08, 0x54, 0x32, 0x0d, 0x70, 0x79, 0x85, 0xb3, 0x5b, 0xa6, 0xae, 0xa0, 0x29, 0x0f, 0x33, 0x10, 0x8a, 0x29, 0x45, 0x0e, 0xdc, 0xc6, 0x96, 0x13, 0xa0, 0x0d, 0x1a, 0xa4, 0x9a, 0x33, 0x04, 0xc5, 0x69, 0x1e, 0xb4, 0xd6, 0xc3, 0xc0, 0xf3, 0x2d, 0x4a, 0xb4, 0x7e, 0x21, 0x18, 0x41, 0x69, 0xb5, 0xa6, 0xe9, 0xfa, 0x89, 0x42, 0x4c, 0xbf, 0xc4, 0x98, 0x12, 0x30, 0x44, 0x79, 0xd4, 0x41, 0x15, 0x74, 0x32, 0x0b, 0x45, 0xa1, 0x0f, 0x21, 0xa3, 0x52, 0xf4, 0x12, 0xc4, 0xae, 0x43, 0x05, 0xa0, 0x9a, 0x80, 0x1d, 0x8a, 0x6e, 0x21, 0x16, 0x23, 0xc3, 0x20, 0x7a, 0x3d, 0x89, 0x3e, 0x98, 0xcc, 0x18, 0x70, 0x96, 0x89, 0xf0, 0x40, 0x56, 0x18, 0x45, 0xcc, 0xa4, 0x2c, 0x15, 0x4a, 0x2b, 0x04, 0xc9, 0x12, 0xc3, 0x9d, 0xc4, 0x83, 0x1e, 0x14, 0x42, 0x1f, 0xa2, 0xa9, 0xdb, 0xc3, 0x22, 0xcc, 0x74, 0x2a, 0xa7, 0x8c, 0x8f, 0x1b, 0x7c, 0x3d, 0xac, 0x75, 0xbc, 0x59, 0x6c, 0x86, 0x97, 0xd9, 0x6d, 0x1a, 0xf6, 0x73, 0x65, 0xb6, 0x21, 0xc6, 0xe7, 0x62, 0x5f, 0xc4, 0x4b, 0x99, 0xd7, 0x58, 0x4f, 0x38, 0xcd, 0x28, 0x36, 0x0c, 0xc5, 0x62, 0x5a, 0x90, 0x5b, 0x96, 0xaf, 0x12, 0x93, 0x0e, 0xd5, 0xb5, 0xfe, 0x2a, 0x82, 0xfc, 0x5a, 0xa7, 0xdc, 0x4b, 0x82, 0x9f, 0xe3, 0x76, 0x35, 0xf1, 0x3f, 0x5a, 0xf2, 0xa6, 0xd3, 0x08, 0x1d, 0xad, 0x87, 0x87, 0x85, 0x69, 0x8a, 0x0a, 0xa9, 0x14, 0x37, 0x4c, 0x4e, 0x43, 0xb8, 0x9f, 0x09, 0x4a, 0x78, 0x92, 0xaa, 0x14, 0x9a, 0x38, 0xb4, 0x9c, 0x06, 0xa0, 0x68, 0xd8, 0x29, 0xa8, 0xd2, 0x49, 0xe7, 0x53, 0xa3, 0x75, 0xd0, 0x97, 0xa0, 0xf1, 0x62, 0xe6, 0xc3, 0xa4, 0xdf, 0xe8, 0xc7, 0x97, 0x61, 0x41, 0x0c, 0x60, 0x5e, 0xd3, 0x89, 0x9a, 0x3f, 0xc4, 0x43, 0x78, 0xe1, 0x4f, 0x28, 0x87, 0x9e, 0x8f, 0x14, 0x80, 0x77, 0xe6, 0xbc, 0x3b, 0xb2, 0xae, 0x56, 0x17, 0x8c, 0x49, 0x16, 0x11, 0xbf, 0x6a, 0xaf, 0x5f, 0x9a, 0x9c, 0xb9, 0xb5, 0x65, 0x92, 0x23, 0x00, 0x79, 0x40, 0xbc, 0xd6, 0xf8, 0xa2, 0x32, 0x80, 0xa5, 0x60, 0x15, 0x33, 0x0e, 0x85, 0x77, 0x25, 0x95, 0x87, 0xb1, 0x26, 0x06, 0xf4, 0xc9, 0x37, 0xea, 0x13, 0x60, 0x6c, 0xb3, 0xbb, 0x04, 0x60, 0x66, 0xad, 0x29, 0x42, 0x61, 0xe2, 0xb2, 0x20, 0x22, 0xbc, 0xc7, 0x46, 0x78, 0xa5, 0x52, 0x05, 0x70, 0xd8, 0x8e, 0x4c, 0xeb, 0x42, 0x69, 0x26, 0x31, 0xe7, 0xe3, 0x71, 0x1c, 0x4b, 0x2f, 0xd5, 0x34, 0x7f, 0x03, 0x28, 0x59, 0x83, 0x40, 0xcb, 0x3c, 0x65, 0xc8, 0xf5, 0x5a, 0xc0, 0x27, 0x16, 0x83, 0x10, 0x94, 0xcb, 0x6e, 0xb9, 0x0f, 0x17, 0x5b, 0x17, 0x3d, 0x9c, 0x65, 0x03, 0x29, 0xaa, 0xf5, 0x13, 0x63, 0x36, 0x33, 0xbb, 0x2c, 0xe6, 0x85, 0x8e, 0x74, 0x47, 0xab, 0xc4, 0x1b, 0x6f, 0xb0, 0x6d, 0xa8, 0x78, 0x25, 0x72, 0xc3, 0x32, 0xb0, 0x96, 0x60, 0x36, 0x69, 0x26, 0xbf, 0x52, 0x9e, 0xd8, 0xca, 0xaa, 0x62, 0x43, 0xcc, 0xdb, 0x15, 0x2b, 0x36, 0xba, 0x6e, 0x47, 0xc7, 0x14, 0x14, 0x5c, 0x86, 0xf5, 0xb3, 0xb6, 0x1d, 0xe8, 0x4e, 0xf1, 0x47, 0x0d, 0x03, 0xfa, 0x01, 0x35, 0xe3, 0x51, 0x94, 0xfa, 0x1f, 0xb3, 0xbc, 0x86, 0x0f, 0xa5, 0x00, 0xd1, 0x29, 0x9a, 0xee, 0x88, 0xce, 0x56, 0x05, 0x43, 0x76, 0xc1, 0x19, 0x9c, 0x55, 0x3d, 0xd9, 0x0a, 0x8d, 0x6f, 0x9c, 0xc7, 0x63, 0xc8, 0x11, 0xd0, 0xc6, 0x6d, 0xa6, 0xf8, 0x51, 0xab, 0xf1, 0x05, 0x66, 0x35, 0xa3, 0x4a, 0x68, 0xaa, 0x78, 0x15, 0x86, 0x8f, 0x15, 0x3a, 0x3a, 0x5c, 0x77, 0xfc, 0xc8, 0xb1, 0xeb, 0x18, 0x07, 0xfb, 0xf6, 0x2a, 0x6f, 0xb4, 0x3b, 0x35, 0x57, 0x00, 0xe7, 0x82, 0x30, 0x94, 0x3a, 0x2b, 0xa1, 0xe1, 0x1b, 0x18, 0x13, 0x45, 0xb1, 0x1b, 0x4d, 0x46, 0x26, 0x6e, 0x7b, 0x35, 0x9f, 0x07, 0x4a, 0x50, 0x0c, 0x88, 0x57, 0xd7, 0x9b, 0xa6, 0x0f, 0x64, 0x26, 0x2d, 0x66, 0x2c, 0xcd, 0x9c, 0x84, 0x89, 0xa4, 0xc1, 0x9d, 0xf6, 0x74, 0x37, 0xdb, 0x19, 0x3f, 0x95, 0xb9, 0x76, 0x51, 0x81, 0xd9, 0x15, 0x22, 0x62, 0xb1, 0x16, 0x6f, 0x97, 0xbe, 0x53, 0x49, 0x7f, 0x00, 0x1c, 0xb1, 0xbe, 0x79, 0x02, 0x4d, 0x6a, 0x22, 0x89, 0xbc, 0xc7, 0x04, 0xe1, 0xb1, 0xd8, 0x21, 0x01, 0x53, 0x66, 0xa3, 0xcc, 0x8a, 0x48, 0x4e, 0x6b, 0xc2, 0xe1, 0xf1, 0xb8, 0x89, 0xf1, 0x93, 0x23, 0xe3, 0x10, 0x1a, 0xa0, 0x9a, 0xd9, 0xea, 0x62, 0xba, 0x40, 0x05, 0x03, 0x9b, 0xbf, 0xb5, 0x99, 0x80, 0x55, 0xf9, 0x3f, 0xbf, 0x77, 0xb1, 0x44, 0x33, 0x11, 0x6d, 0x59, 0x58, 0x42, 0x26, 0x54, 0xda, 0xda, 0x11, 0x27, 0x21, 0x3f, 0x02, 0xb7, 0x87, 0x17, 0xa5, 0xa0, 0x45, 0x42, 0x71, 0xd5, 0xb0, 0xc0, 0x25, 0x17, 0xa6, 0xc2, 0x7a, 0x3c, 0x36, 0x10, 0x10, 0x1d, 0x75, 0x3c, 0x09, 0xa2, 0x55, 0x71, 0x77, 0x54, 0x77, 0xdc, 0x13, 0xb2, 0xe4, 0x04, 0xdb, 0x49, 0x65, 0xb9, 0xa9, 0x35, 0x03, 0x30, 0xc7, 0x3a, 0x8a, 0x36, 0x42, 0xd3, 0x9a, 0xf8, 0xa2, 0x38, 0x39, 0xab, 0x85, 0xc6, 0x35, 0x5b, 0x12, 0xf2, 0x79, 0xf8, 0x49, 0x81, 0x3c, 0x28, 0x0d, 0x54, 0xc5, 0x91, 0x3e, 0x99, 0xb6, 0x94, 0x6a, 0x0a, 0xaf, 0x01, 0x2c, 0x8c, 0xab, 0x02, 0x53, 0x96, 0xb2, 0x55, 0xf0, 0x02, 0xd8, 0x37, 0xc7, 0x61, 0xd4, 0x2a, 0x4a, 0xeb, 0x38, 0xc5, 0xf4, 0x56, 0xaa, 0xf7, 0x9e, 0x16, 0x27, 0x00, 0xc6, 0xb4, 0x04, 0x8e, 0xca, 0x6f, 0x9a, 0x73, 0x67, 0xf9, 0x02, 0x38, 0xd6, 0x7b, 0xcf, 0x8e, 0x6a, 0x0d, 0x8a, 0x55, 0x3c, 0x07, 0x15, 0x22, 0xf9, 0xd2, 0x39, 0x4e, 0x28, 0x48, 0x3d, 0x20, 0x48, 0xbe, 0x2a, 0x8f, 0x9c, 0x8c, 0x8e, 0x39, 0x99, 0x1a, 0x41, 0x27, 0x3c, 0x7e, 0xac, 0xae, 0xfc, 0x6a, 0x30, 0x8b, 0xe8, 0x70, 0xb4, 0x5b, 0x41, 0x17, 0x64, 0x12, 0x95, 0x4a, 0x1a, 0x0f, 0xd8, 0x3d, 0x36, 0x2a, 0x5a, 0xb2, 0x88, 0x66, 0x3d, 0xec, 0x54, 0x56, 0xb6, 0x28, 0x6d, 0x0b, 0x2c, 0xec, 0xb0, 0x19, 0x22, 0xfb, 0x3d, 0x47, 0x38, 0x02, 0xea, 0x2b, 0x86, 0x63, 0x9b, 0xce, 0x02, 0x45, 0x03, 0x39, 0x26, 0x1c, 0xff, 0xb1, 0x14, 0xe1, 0xe7, 0x25, 0xe9, 0x06, 0x77, 0x82, 0x6a, 0x16, 0x88, 0xf6, 0x86, 0xb2, 0x9a, 0x78, 0x77, 0x9c, 0x98, 0x22, 0x31, 0x5d, 0xaf, 0xc5, 0x57, 0x53, 0xe9, 0x8c, 0x8e, 0xd3, 0x22, 0x1f, 0x2b, 0x32, 0x20, 0x80, 0x5c, 0x8a, 0x28, 0x98, 0x33, 0x55, 0x20, 0x7d, 0xa3, 0x6f, 0xb7, 0x2f, 0x9b, 0xc8, 0x5c, 0x0a, 0x13, 0xb9, 0xd0, 0x41, 0x58, 0x6f, 0xd5, 0x83, 0xfe, 0xb1, 0x2a, 0xfd, 0x5a, 0x40, 0x2d, 0xd3, 0x3b, 0x43, 0x54, 0x3f, 0x5f, 0xa4, 0xeb, 0x43, 0x6c, 0x8d, 0x23, 0x49, 0x7b, 0x31, 0x27, 0x9a, 0x8b, 0x71, 0x5f, 0x91, 0x2f, 0x30, 0xa1, 0x81, 0x66, 0x62, 0x70, 0x91, 0x3b, 0xbd, 0x72, 0x59, 0x8e, 0xb9, 0xcd, 0x65, 0xa6, 0xda, 0x68, 0x0f, 0x5c, 0x6b, 0x3e, 0x2a, 0x2e, 0xa6, 0xc9, 0xc4, 0x76, 0xfc, 0x49, 0x37, 0xb0, 0x13, 0xc9, 0x93, 0xa7, 0x93, 0xd6, 0xc0, 0xab, 0x99, 0x60, 0x69, 0x5b, 0xa8, 0x38, 0xf6, 0x49, 0xda, 0x53, 0x9c, 0xa3, 0xd0];
    /// let key = botan::Privkey::load_kyber(&v).unwrap();
    /// let v2 = key.get_kyber_key().unwrap();
    /// assert_eq!(v, v2);
    /// ```
    /// ```
    /// let v = vec![0x46, 0x23, 0x96, 0xf6, 0xb2, 0x1f, 0xf6, 0x25, 0xb9, 0x6b, 0x4b, 0x1f, 0x5c, 0x3a, 0x38, 0xb3, 0xc8, 0x07, 0x08, 0xf3, 0x3b, 0xcc, 0x17, 0x84, 0xbe, 0xdb, 0x48, 0xbe, 0xe0, 0x25, 0x3b, 0x42, 0x6c, 0xfb, 0x95, 0x61, 0x87, 0x12, 0xce, 0x98, 0x25, 0xa5, 0x3b, 0x5c, 0xc8, 0x7c, 0x81, 0x43, 0xaf, 0xc4, 0x6b, 0x40, 0x62, 0x7b, 0x4c, 0x4b, 0xbd, 0x2e, 0x38, 0x2c, 0xec, 0x45, 0x7e, 0x48, 0xa7, 0x13, 0x0c, 0x84, 0x12, 0xc2, 0x60, 0x5c, 0x47, 0x59, 0x15, 0xbf, 0x08, 0x47, 0x6d, 0xe4, 0xb8, 0xaa, 0x70, 0x29, 0x8a, 0xb9, 0x9d, 0xef, 0x93, 0x86, 0xc1, 0xf1, 0x12, 0x53, 0xc3, 0x98, 0xc6, 0xd0, 0xad, 0xf9, 0xd9, 0x7e, 0x22, 0x64, 0xa0, 0x26, 0xe4, 0x02, 0x11, 0xb5, 0x9a, 0x26, 0xa2, 0x3f, 0x16, 0x10, 0x2a, 0x22, 0x0a, 0x6f, 0x2b, 0xf2, 0x7a, 0x14, 0x01, 0x5f, 0x6f, 0x32, 0x61, 0xe2, 0x74, 0x75, 0x8c, 0xcc, 0xb7, 0x57, 0xa4, 0x06, 0x00, 0x53, 0x17, 0xa0, 0x50, 0xc2, 0x2d, 0x39, 0x9f, 0x99, 0x49, 0x74, 0xaa, 0x73, 0x13, 0xed, 0xfb, 0xba, 0x46, 0x08, 0x37, 0x16, 0x13, 0x98, 0x54, 0x81, 0xb0, 0xae, 0xc8, 0x9e, 0xdd, 0x60, 0x02, 0x75, 0x4b, 0x18, 0xe2, 0x75, 0xb9, 0x7a, 0xf8, 0xb4, 0xad, 0xc6, 0x82, 0xb5, 0x73, 0xb9, 0xa5, 0x68, 0x73, 0x24, 0x23, 0xb2, 0x0d, 0xf4, 0x18, 0xda, 0x0a, 0x0f, 0x69, 0x08, 0x66, 0x3b, 0xe9, 0x83, 0x3e, 0xda, 0x12, 0x69, 0x12, 0x77, 0x02, 0xe9, 0x7d, 0xb8, 0x2b, 0xb1, 0x1d, 0xe2, 0x2c, 0xc0, 0x76, 0x5e, 0x26, 0xca, 0xb6, 0x0d, 0x25, 0x6c, 0xbb, 0x27, 0x22, 0x13, 0x15, 0xc2, 0xc1, 0xd7, 0x5f, 0x56, 0xe6, 0xaa, 0x4c, 0x08, 0xcc, 0x83, 0x45, 0xa1, 0x6b, 0x68, 0x00, 0xe3, 0x30, 0x75, 0x6c, 0xec, 0x02, 0x67, 0xc0, 0x2d, 0x1d, 0xe1, 0xca, 0x3c, 0xa8, 0x73, 0x81, 0x56, 0xc8, 0x8e, 0xd6, 0xae, 0x90, 0xf8, 0x42, 0x9b, 0x5a, 0xad, 0x8c, 0x5a, 0x53, 0xfe, 0x26, 0x87, 0xd2, 0x07, 0x4f, 0xdb, 0x18, 0xb1, 0x24, 0x1a, 0x48, 0x9e, 0x85, 0x50, 0xab, 0xaa, 0x7b, 0x55, 0x9a, 0xcc, 0x6a, 0xb4, 0xb5, 0x39, 0x6c, 0x82, 0x1b, 0x85, 0x43, 0x05, 0xca, 0xa6, 0x6a, 0x47, 0x80, 0x39, 0xcc, 0x2c, 0xf7, 0x36, 0x5f, 0x56, 0xa3, 0x44, 0xd1, 0xf0, 0x9a, 0xa7, 0x3a, 0x66, 0x7a, 0x15, 0xce, 0x71, 0xb2, 0x10, 0xd9, 0xb9, 0x30, 0x40, 0x3a, 0x38, 0xa2, 0xa1, 0x0c, 0xde, 0xf3, 0x9b, 0x9e, 0x89, 0x60, 0xad, 0x46, 0x33, 0x13, 0xb7, 0xab, 0x3d, 0x72, 0x3a, 0x71, 0x5c, 0x1d, 0x72, 0x9b, 0x79, 0xb4, 0x6b, 0x7b, 0xce, 0xdb, 0x31, 0xb9, 0x2b, 0x77, 0x86, 0x4a, 0xc9, 0x14, 0x6c, 0x15, 0xa8, 0x9b, 0xaf, 0xe1, 0x60, 0x1f, 0xcc, 0x83, 0x28, 0xe6, 0x57, 0xa6, 0xeb, 0xba, 0xbe, 0xf8, 0x11, 0x59, 0x86, 0xdc, 0x87, 0xf1, 0x72, 0x34, 0xba, 0xa3, 0x88, 0x5e, 0x33, 0xa1, 0x85, 0x68, 0x8b, 0x91, 0x58, 0x83, 0xec, 0x48, 0x09, 0xc5, 0xc9, 0x69, 0x1b, 0x95, 0xa0, 0x81, 0x79, 0xa4, 0x85, 0x77, 0xc1, 0x72, 0x4a, 0xa1, 0xbc, 0xf6, 0x64, 0xd5, 0xea, 0x49, 0xc6, 0x9a, 0x72, 0x7c, 0xda, 0x3e, 0x31, 0xe7, 0x1e, 0x67, 0x25, 0x7e, 0x65, 0xe8, 0x47, 0xdf, 0x59, 0x47, 0xab, 0xe2, 0x96, 0x75, 0x73, 0xac, 0x2d, 0x61, 0x59, 0xf9, 0x66, 0x99, 0xae, 0x16, 0xa5, 0x5f, 0x65, 0x4e, 0x8f, 0xe0, 0x0b, 0xea, 0x67, 0x91, 0x13, 0x5a, 0xa0, 0x45, 0xd8, 0x51, 0xd0, 0xd7, 0x3c, 0xd1, 0x59, 0xbe, 0x5c, 0x00, 0x04, 0x1b, 0x10, 0x33, 0xaf, 0x18, 0x50, 0x0c, 0xc6, 0x2b, 0x8d, 0xc6, 0x36, 0xbe, 0xd7, 0x0e, 0x4d, 0xd4, 0x98, 0x1e, 0x37, 0x88, 0x20, 0xeb, 0x73, 0xa7, 0xd3, 0xbc, 0x69, 0xa4, 0x2d, 0xcb, 0x91, 0x03, 0xec, 0x8b, 0xb8, 0x02, 0x07, 0x63, 0xba, 0x76, 0xb4, 0x82, 0x11, 0x80, 0x65, 0x29, 0x55, 0x3d, 0xa6, 0x48, 0x75, 0x39, 0x89, 0x47, 0x22, 0x44, 0x36, 0x72, 0xbc, 0x7e, 0xc3, 0x16, 0x46, 0x15, 0x8c, 0xa6, 0x63, 0x43, 0xe2, 0xe6, 0x9b, 0xd6, 0x38, 0xcc, 0x4a, 0x3c, 0x71, 0x1e, 0x37, 0x75, 0xce, 0x88, 0xb4, 0x96, 0x8a, 0x2c, 0xdb, 0xb7, 0x72, 0xa0, 0xd9, 0xaf, 0x6a, 0xa3, 0x91, 0x68, 0x55, 0x00, 0x74, 0xa6, 0x58, 0x2d, 0xa1, 0x93, 0x66, 0xf6, 0x1b, 0xe1, 0x74, 0x03, 0x44, 0x72, 0x18, 0x2d, 0x90, 0x0c, 0x05, 0x98, 0x36, 0x9a, 0x6c, 0x65, 0x6d, 0x30, 0xc9, 0x95, 0x57, 0xaa, 0xf6, 0xe4, 0x30, 0x23, 0xf4, 0x17, 0xbc, 0x4a, 0x2d, 0x8e, 0x29, 0x44, 0xc4, 0xe6, 0x01, 0x01, 0x52, 0xbf, 0x28, 0xeb, 0x21, 0x19, 0xa9, 0x04, 0x67, 0xaa, 0x18, 0x57, 0x06, 0x39, 0x6f, 0x93, 0x37, 0x22, 0xf1, 0x93, 0x73, 0xd3, 0x43, 0x1b, 0x01, 0x7b, 0x79, 0x4a, 0x19, 0xb9, 0x8b, 0x39, 0x90, 0x18, 0x8b, 0xcc, 0x71, 0x42, 0xcd, 0x23, 0xa7, 0x5a, 0x28, 0xa9, 0x5d, 0x2c, 0x25, 0xaa, 0xf7, 0xc2, 0xdf, 0xd8, 0xba, 0x06, 0xe4, 0x70, 0x66, 0x94, 0x0c, 0x1f, 0xa5, 0x56, 0x55, 0xda, 0xb9, 0xbe, 0xb6, 0x86, 0x42, 0x8c, 0x72, 0xe9, 0x00, 0x70, 0xf8, 0x1a, 0x6b, 0xfb, 0x63, 0x45, 0x76, 0x61, 0x51, 0xff, 0xc0, 0x59, 0xea, 0x64, 0x25, 0x5f, 0xb2, 0x4a, 0xa3, 0xe4, 0x7c, 0xfc, 0x01, 0x30, 0x0f, 0x43, 0x91, 0x1a, 0xe3, 0x93, 0xe6, 0xd7, 0xa8, 0x9e, 0x1c, 0x22, 0x8f, 0x3b, 0x55, 0xd7, 0x0b, 0x9d, 0x9d, 0x4b, 0x5c, 0xc0, 0x06, 0x71, 0xad, 0x0b, 0x69, 0x48, 0x67, 0x4a, 0x29, 0x69, 0x52, 0xff, 0x57, 0x65, 0xa3, 0x75, 0x2c, 0x93, 0xc8, 0x7e, 0xe6, 0x15, 0xc6, 0x83, 0xe3, 0xa1, 0xf7, 0x91, 0x4d, 0x2c, 0x72, 0x53, 0x4e, 0x6b, 0xb2, 0x31, 0xbb, 0x10, 0x16, 0xea, 0x60, 0xe7, 0xa5, 0xb8, 0x97, 0xe3, 0x2e, 0x4d, 0x62, 0xa3, 0x83, 0x94, 0x5f, 0xd9, 0x91, 0x36, 0xbf, 0xe7, 0xcf, 0x14, 0x48, 0x49, 0xec, 0xaa, 0x4a, 0x05, 0x47, 0xc0, 0x40, 0x99, 0x9a, 0x55, 0xf2, 0x49, 0x75, 0x27, 0xc5, 0x72, 0xeb, 0xcb, 0x2f, 0xec, 0x46, 0xeb, 0x29, 0x41, 0x07, 0xf4, 0xbf, 0x64, 0x79, 0x6b, 0xe4, 0xbc, 0x99, 0xbc, 0x6b, 0x86, 0xb2, 0x98, 0x60, 0x51, 0x57, 0x45, 0xf5, 0xb4, 0x04, 0xec, 0x79, 0x09, 0x3b, 0xb3, 0x6f, 0xc7, 0xbb, 0xad, 0x79, 0xb6, 0xc0, 0xc8, 0xa3, 0xba, 0x4e, 0xdb, 0x56, 0xa4, 0xc8, 0x8f, 0xf9, 0x47, 0x8b, 0x74, 0xe7, 0xc9, 0x0b, 0x2c, 0x25, 0x69, 0x08, 0x82, 0xac, 0x84, 0x51, 0x8d, 0x51, 0x11, 0xff, 0xa3, 0x6f, 0xf1, 0xe4, 0x9b, 0x5b, 0xbc, 0x5a, 0xf4, 0xe5, 0x7b, 0xc2, 0x02, 0xaf, 0x12, 0x5c, 0x66, 0x08, 0x2a, 0x30, 0x4d, 0xda, 0x86, 0xed, 0xb6, 0x06, 0xb6, 0x43, 0x73, 0xab, 0xb6, 0x68, 0x3b, 0x56, 0x94, 0x96, 0x61, 0xab, 0x60, 0xc0, 0x11, 0xe1, 0x4c, 0x2b, 0x23, 0xc8, 0x92, 0x35, 0x87, 0xa9, 0x74, 0xcc, 0x79, 0x57, 0x4c, 0x82, 0x95, 0x62, 0x10, 0x91, 0x80, 0x1d, 0x37, 0x23, 0x97, 0x57, 0x85, 0x58, 0x31, 0x69, 0xc3, 0x58, 0xd1, 0x82, 0x59, 0x6c, 0x34, 0x4b, 0x22, 0x96, 0x4a, 0x40, 0x95, 0x8b, 0x22, 0x72, 0xba, 0xfb, 0x0f, 0xfd, 0x2b, 0xcc, 0xe4, 0xb1, 0x4f, 0x02, 0x10, 0xcb, 0xc8, 0x14, 0x47, 0x6f, 0x40, 0x47, 0xf4, 0x80, 0x56, 0x83, 0x96, 0x74, 0x2b, 0x01, 0x23, 0x32, 0xa1, 0xa1, 0x19, 0x10, 0x56, 0xdf, 0xb9, 0xb4, 0x3a, 0x75, 0x7b, 0xa6, 0xac, 0x37, 0xbc, 0x66, 0x62, 0xe4, 0x33, 0xca, 0xf1, 0x59, 0x83, 0x95, 0xe6, 0x4f, 0xa9, 0xa7, 0x2f, 0x3b, 0x71, 0x00, 0x6a, 0xeb, 0x8e, 0xb3, 0x73, 0x76, 0xfd, 0xd6, 0x17, 0x4a, 0xe0, 0x60, 0x5a, 0x6b, 0x53, 0x2a, 0xb6, 0x14, 0xf0, 0x26, 0x41, 0xae, 0x56, 0x3b, 0xf2, 0x30, 0x19, 0x00, 0xf4, 0x01, 0xed, 0xd3, 0xb4, 0x31, 0xd3, 0x90, 0xa9, 0xea, 0x4a, 0x2b, 0x36, 0x9b, 0xcf, 0xf4, 0xb8, 0x38, 0xe8, 0x4a, 0x88, 0x79, 0x91, 0xa1, 0x67, 0xc8, 0x68, 0xcc, 0x9b, 0xa1, 0x6b, 0x3c, 0x31, 0x89, 0xb3, 0xe1, 0x90, 0x8f, 0x73, 0x64, 0x60, 0x4f, 0x38, 0x2a, 0x2a, 0x0a, 0x85, 0xc8, 0xe3, 0x41, 0x98, 0x1b, 0x9f, 0xec, 0x47, 0x33, 0x30, 0x2a, 0x1e, 0xdb, 0x44, 0x71, 0x9e, 0x3b, 0x53, 0x7b, 0x77, 0x0b, 0x38, 0xd4, 0x85, 0x1e, 0x5c, 0x01, 0x0d, 0xa3, 0x9a, 0x74, 0x70, 0xbc, 0x1c, 0x80, 0x91, 0x6f, 0x78, 0xc7, 0xbd, 0x58, 0x91, 0xdc, 0xd3, 0xb1, 0xea, 0x84, 0xb6, 0xf0, 0x51, 0xb3, 0x46, 0xb8, 0x03, 0xc1, 0xb9, 0x7c, 0x94, 0x60, 0x40, 0x20, 0xb7, 0x27, 0x9b, 0x27, 0x83, 0x6c, 0x30, 0x49, 0xea, 0x0b, 0x9a, 0x37, 0x58, 0x51, 0x0b, 0x75, 0x59, 0x59, 0x32, 0x37, 0xad, 0xe7, 0x25, 0x87, 0x46, 0x22, 0x06, 0xb7, 0x09, 0xf3, 0x65, 0x84, 0x8c, 0x96, 0x55, 0x93, 0x26, 0xa5, 0xfe, 0x6c, 0x6f, 0x4c, 0xf5, 0x31, 0xfd, 0x1a, 0x18, 0x47, 0x72, 0x67, 0xf6, 0x6b, 0xa1, 0x4a, 0xf2, 0x01, 0x63, 0xc4, 0x1f, 0x11, 0x38, 0xa0, 0x19, 0x95, 0x14, 0x7f, 0x27, 0x1d, 0xdf, 0xc2, 0xbe, 0x53, 0x61, 0xb2, 0x81, 0xe6, 0x02, 0x9d, 0x21, 0x05, 0x84, 0xb2, 0x85, 0x9b, 0x73, 0x83, 0x66, 0x72, 0x84, 0xf7, 0x67, 0xbb, 0x32, 0x78, 0x2b, 0xaa, 0xd1, 0x09, 0x33, 0xda, 0x01, 0x38, 0xa3, 0xa0, 0x66, 0x0a, 0x14, 0x95, 0x31, 0xc0, 0x3f, 0x9c, 0x8f, 0xfc, 0xcb, 0x33, 0xe3, 0xc3, 0xa5, 0xa7, 0x98, 0x4e, 0x21, 0xfa, 0xb2, 0x6a, 0xa7, 0x2a, 0x8a, 0x6b, 0x94, 0x2f, 0x26, 0x5e, 0x52, 0x55, 0x1a, 0x9c, 0x80, 0x0e, 0x5a, 0x44, 0x80, 0x5f, 0x0c, 0x01, 0x41, 0xa0, 0x55, 0x54, 0x21, 0x33, 0x87, 0xf1, 0x05, 0xdf, 0x56, 0x45, 0x84, 0x96, 0xbd, 0x8f, 0x46, 0x90, 0x51, 0x88, 0x6d, 0xa2, 0x23, 0xcb, 0x9f, 0xe7, 0x8e, 0x7b, 0x39, 0x0b, 0xf9, 0x4b, 0x0a, 0x93, 0x76, 0x91, 0xaf, 0x95, 0x50, 0x08, 0x2b, 0x76, 0xd0, 0x45, 0xcb, 0x4d, 0x29, 0xc2, 0x3c, 0x67, 0x94, 0x26, 0x08, 0xd0, 0x78, 0xa1, 0xc8, 0x0f, 0x24, 0x76, 0x7a, 0x94, 0x5d, 0x19, 0xf0, 0x77, 0xd8, 0x2c, 0x9b, 0x9b, 0x19, 0x70, 0x73, 0x46, 0x4a, 0xbe, 0x69, 0xcf, 0x7c, 0x56, 0x26, 0x17, 0x73, 0x08, 0xf3, 0x84, 0x67, 0x2d, 0x52, 0x63, 0xb0, 0xc4, 0x82, 0x6d, 0xb4, 0x47, 0x0e, 0x1a, 0x70, 0xe4, 0x75, 0x1e, 0x39, 0x18, 0xab, 0xe8, 0xfc, 0xbc, 0x3b, 0xc0, 0x53, 0x1a, 0xe8, 0x9e, 0x55, 0x12, 0x21, 0x4b, 0x5c, 0xc9, 0x4a, 0x16, 0xa0, 0x14, 0xbc, 0xb3, 0x82, 0x6c, 0x79, 0xfb, 0xf4, 0xad, 0xd0, 0x82, 0x5e, 0xee, 0xfb, 0xab, 0x88, 0xcb, 0x7c, 0xff, 0x37, 0xbb, 0x8d, 0x49, 0x1f, 0x8d, 0xe9, 0x02, 0x57, 0x8a, 0x1e, 0x96, 0x16, 0x55, 0x56, 0x5b, 0x77, 0x18, 0x78, 0x2a, 0x23, 0x50, 0x4f, 0xdc, 0x13, 0xc7, 0x83, 0xf1, 0x30, 0xe1, 0x77, 0x92, 0x5e, 0x30, 0x5d, 0x1f, 0xbc, 0x63, 0xcc, 0x8c, 0x15, 0xc2, 0xc6, 0x7f, 0x85, 0x50, 0x0c, 0xca, 0x78, 0x5d, 0xe9, 0xf4, 0x80, 0x49, 0x05, 0x58, 0xef, 0x71, 0xaa, 0xf0, 0xfb, 0x5b, 0x51, 0x39, 0x14, 0x40, 0x12, 0x69, 0xb3, 0x09, 0xc4, 0xc5, 0x9c, 0x64, 0xd2, 0xa7, 0x57, 0xd8, 0x85, 0x5f, 0x58, 0x46, 0x56, 0x15, 0x92, 0x5f, 0x1e, 0xa6, 0x81, 0x2c, 0xb1, 0x43, 0xff, 0xf3, 0x83, 0xe1, 0x04, 0x8e, 0x28, 0x51, 0x18, 0xbf, 0x93, 0x29, 0x44, 0xb8, 0x6f, 0xbd, 0xf4, 0xb1, 0xb9, 0xe6, 0x56, 0x85, 0x66, 0x4a, 0x07, 0x77, 0x5c, 0x46, 0x95, 0x2a, 0xaa, 0xda, 0x11, 0x68, 0xf5, 0x4b, 0x47, 0xc7, 0xa2, 0x31, 0xe7, 0x35, 0x5c, 0x64, 0x63, 0x74, 0x67, 0xb5, 0xa3, 0xc0, 0x9c, 0xab, 0x67, 0xbb, 0x35, 0xf5, 0x86, 0x40, 0xc2, 0x72, 0x62, 0x83, 0xbb, 0x63, 0x53, 0x0a, 0x15, 0xf6, 0x6e, 0xca, 0x48, 0xa8, 0x40, 0xc0, 0x0c, 0xa8, 0x86, 0x2e, 0x28, 0x3c, 0x73, 0xbf, 0xbb, 0x41, 0x3a, 0x29, 0x15, 0xb8, 0xd1, 0x15, 0x9a, 0x04, 0x3f, 0x12, 0xc5, 0x9b, 0xfa, 0x82, 0x82, 0x48, 0x24, 0x9b, 0x76, 0x10, 0x6f, 0xaa, 0x61, 0xa1, 0x27, 0xa0, 0x28, 0x0c, 0x58, 0x63, 0x50, 0xe7, 0xa4, 0x2c, 0xb7, 0x4c, 0xa4, 0x9c, 0xab, 0xd6, 0x06, 0x89, 0x1e, 0xc7, 0xcb, 0x8e, 0x84, 0xaf, 0xfe, 0x4b, 0x2e, 0x14, 0xc7, 0x16, 0x58, 0x33, 0x2b, 0x75, 0x56, 0x11, 0xba, 0xb7, 0x97, 0x7f, 0xa7, 0x6c, 0xe7, 0x36, 0xb2, 0x1e, 0xd3, 0x4a, 0x17, 0xac, 0x0e, 0xc3, 0x56, 0x1c, 0xa9, 0xb2, 0x82, 0xd4, 0xa2, 0xbc, 0x40, 0x76, 0x97, 0x92, 0x4b, 0x1c, 0xf9, 0x18, 0xba, 0x83, 0xd3, 0xa4, 0xfd, 0xc8, 0x25, 0x64, 0xc9, 0x5b, 0xd9, 0x04, 0xbd, 0xee, 0xe9, 0x1e, 0xd6, 0xcc, 0xb3, 0x6b, 0xaa, 0x88, 0xa0, 0x5c, 0x80, 0x71, 0x29, 0x01, 0xbf, 0x28, 0x0a, 0xee, 0x65, 0x38, 0xec, 0x20, 0x78, 0xc2, 0xa8, 0x4e, 0xe5, 0x86, 0x2f, 0xc1, 0x37, 0xcd, 0x92, 0xe9, 0x79, 0x68, 0xd6, 0x9f, 0xc3, 0x45, 0x3a, 0x1e, 0x1c, 0xb1, 0x61, 0xc5, 0x0c, 0x9f, 0x24, 0x73, 0xa0, 0xd0, 0x90, 0x37, 0xb1, 0x88, 0xa0, 0xfa, 0x01, 0xef, 0xc3, 0x44, 0xc2, 0xac, 0x8f, 0xe8, 0x59, 0x2b, 0x0a, 0x58, 0x45, 0x66, 0x62, 0xa9, 0x50, 0x33, 0x65, 0x9a, 0x15, 0x8a, 0x2d, 0x90, 0xa6, 0xe5, 0x0c, 0x25, 0x3a, 0x87, 0x97, 0x57, 0x85, 0xce, 0x29, 0xc4, 0x57, 0x00, 0x00, 0xa1, 0x54, 0xd4, 0xb3, 0xb2, 0xc6, 0x42, 0x20, 0x5c, 0x8c, 0x7c, 0xf9, 0xac, 0x6b, 0x10, 0x71, 0xfb, 0xb3, 0x68, 0xab, 0x95, 0x0a, 0x74, 0x4b, 0x88, 0xc9, 0x5b, 0xa5, 0x24, 0x30, 0x17, 0x83, 0x11, 0x20, 0xa9, 0x04, 0x83, 0x38, 0xd2, 0x98, 0x47, 0x83, 0x0d, 0x12, 0xa9, 0x33, 0xa0, 0x9a, 0xbd, 0x21, 0xa4, 0x6b, 0x82, 0x8c, 0xb1, 0x4e, 0x80, 0x8c, 0xd3, 0x51, 0x29, 0xc9, 0xdc, 0x6e, 0x5b, 0x93, 0x1d, 0x4a, 0x12, 0x6f, 0xef, 0xe0, 0x79, 0x09, 0x61, 0x8e, 0x2b, 0x45, 0x86, 0xe7, 0xb6, 0xb4, 0x24, 0x96, 0x3b, 0x73, 0x23, 0xba, 0x50, 0x5b, 0xa1, 0x12, 0xbb, 0x9b, 0x83, 0x4a, 0x7d, 0x1b, 0x78, 0xad, 0x0d, 0xf5, 0x3d, 0x55, 0x6a, 0x1c, 0x69, 0x36, 0x9f, 0x09, 0x14, 0x8b, 0x1d, 0xc9, 0x93, 0x8d, 0xf5, 0x92, 0x23, 0xf0, 0x87, 0xfd, 0x68, 0x33, 0xbe, 0x5b, 0x2b, 0xc2, 0x65, 0x1f, 0xe5, 0x89, 0x11, 0xac, 0x01, 0x46, 0x7f, 0x92, 0x97, 0xdf, 0xdc, 0x22, 0xb4, 0x1a, 0x0f, 0x17, 0x02, 0x71, 0x87, 0x10, 0xb7, 0x8c, 0xf3, 0x5b, 0x18, 0x65, 0x81, 0x3a, 0x89, 0x6d, 0x45, 0x21, 0x4d, 0x33, 0x81, 0x55, 0xb6, 0xc0, 0x43, 0xc5, 0x32, 0x33, 0x0c, 0x00, 0x2d, 0x52, 0x07, 0x39, 0x46, 0x7a, 0x50, 0x4a, 0x86, 0x66, 0x37, 0xfb, 0x34, 0x51, 0xc8, 0x49, 0xf8, 0xf8, 0x3e, 0x6a, 0x94, 0x14, 0x7f, 0x16, 0x8d, 0xa5, 0x3a, 0xcd, 0xf9, 0xd8, 0xaf, 0xfd, 0x96, 0x8a, 0x84, 0x12, 0x4a, 0x9a, 0xbc, 0x09, 0xaf, 0x96, 0x0c, 0xd3, 0xb2, 0x9f, 0x23, 0x44, 0x83, 0x1b, 0xb4, 0x1e, 0x67, 0x60, 0x5e, 0xeb, 0xf0, 0x0d, 0xf2, 0x02, 0x85, 0x71, 0x17, 0x39, 0x9d, 0xd7, 0x48, 0xb6, 0x51, 0x4a, 0xed, 0x61, 0xbb, 0x2f, 0x6c, 0xb8, 0x41, 0xd1, 0x68, 0xd5, 0xf3, 0x5e, 0x20, 0x05, 0x45, 0x73, 0xa3, 0x31, 0xcd, 0x48, 0x82, 0xa0, 0x4b, 0x07, 0x2c, 0x17, 0x91, 0x58, 0x82, 0x5b, 0xcf, 0x47, 0x12, 0x66, 0xda, 0x0d, 0xcc, 0xea, 0xb1, 0xa0, 0x21, 0xc7, 0x32, 0x54, 0x75, 0x1d, 0x5a, 0x16, 0x1c, 0x1a, 0x92, 0x06, 0x2c, 0x22, 0x0a, 0x21, 0x7a, 0x69, 0xd9, 0x82, 0x33, 0x14, 0xb4, 0xde, 0x99, 0x6f, 0xe8, 0xd4, 0x5f, 0x6d, 0xb5, 0xaf, 0x16, 0xc1, 0x56, 0x14, 0x95, 0xa4, 0xc4, 0x30, 0x90, 0xbc, 0x39, 0x4c, 0x94, 0xe1, 0xb0, 0xec, 0x73, 0x8e, 0xb5, 0x62, 0x67, 0x20, 0x1c, 0x2e, 0xcd, 0x1c, 0x7b, 0x49, 0x93, 0xc0, 0xef, 0xc0, 0x28, 0x4b, 0xdc, 0x9a, 0x09, 0x1c, 0x29, 0x4f, 0x95, 0x70, 0x3a, 0x71, 0x78, 0x82, 0x2c, 0x8a, 0x95, 0xb7, 0x9b, 0x1e, 0x45, 0x91, 0xe0, 0x99, 0x8d, 0x89, 0x38, 0x75, 0xc1, 0xa8, 0x79, 0xc0, 0x8a, 0x07, 0x3c, 0xc6, 0x7d, 0xf4, 0x26, 0xbb, 0xa7, 0x92, 0xc1, 0x8a, 0xe6, 0xc1, 0xfe, 0xba, 0x87, 0x9b, 0xec, 0x54, 0x81, 0x2c, 0x2a, 0xff, 0xa0, 0x12, 0x97, 0x3b, 0x70, 0x0a, 0xd4, 0x8e, 0x27, 0x10, 0x78, 0x28, 0x08, 0x64, 0x26, 0x86, 0x00, 0xa7, 0xaa, 0x30, 0x9e, 0xaa, 0x10, 0x98, 0x75, 0x0a, 0x0f, 0x8a, 0x52, 0x2e, 0xb9, 0x29, 0x57, 0x7b, 0x41, 0x2f, 0x78, 0x55, 0x61, 0x36, 0x88, 0xb7, 0x2f, 0x9b, 0xc8, 0x5c, 0x0a, 0x13, 0xb9, 0xd0, 0x41, 0x58, 0x6f, 0xd5, 0x83, 0xfe, 0xb1, 0x2a, 0xfd, 0x5a, 0x40, 0x2d, 0xd3, 0x3b, 0x43, 0x54, 0x3f, 0x5f, 0xa4, 0xeb, 0x43, 0x6c, 0x8d, 0x75, 0x30, 0x0c, 0xab, 0x06, 0x66, 0xec, 0x12, 0x94, 0xf1, 0x4a, 0xeb, 0x07, 0x43, 0x4c, 0x98, 0x84, 0xba, 0x44, 0x00, 0x3e, 0xcd, 0xb4, 0x83, 0x91, 0x83, 0x82, 0x1a, 0x24, 0x85, 0xa7, 0xc6, 0x3e, 0x2a, 0x2e, 0xa6, 0xc9, 0xc4, 0x76, 0xfc, 0x49, 0x37, 0xb0, 0x13, 0xc9, 0x93, 0xa7, 0x93, 0xd6, 0xc0, 0xab, 0x99, 0x60, 0x69, 0x5b, 0xa8, 0x38, 0xf6, 0x49, 0xda, 0x53, 0x9c, 0xa3, 0xd0];
    /// let key = botan::Privkey::load_kyber(&v).unwrap();
    /// let v2 = key.get_kyber_key().unwrap();
    /// assert_eq!(v, v2);
    /// ```
    /// ```
    /// let v = vec![0x46, 0x23, 0x96, 0xf6, 0xb2, 0x1f, 0xf6, 0x25, 0xb9, 0x6b, 0x4b, 0x1f, 0x5c, 0x3a, 0x38, 0xb3, 0xc8, 0x07, 0x08, 0xf3, 0x3b, 0xcc, 0x17, 0x84, 0xbe, 0xdb, 0x48, 0xbe, 0xe0, 0x25, 0x3b, 0x42, 0x6c, 0xfb, 0x95, 0x61, 0x87, 0x12, 0xce, 0x98, 0x25, 0xa5, 0x3b, 0x5c, 0xc8, 0x7c, 0x81, 0x43, 0xaf, 0xc4, 0x6b, 0x40, 0x62, 0x7b, 0x4c, 0x4b, 0xbd, 0x2e, 0x38, 0x2c, 0xec, 0x45, 0x7e, 0x48, 0xa7, 0x13, 0x0c, 0x84, 0x12, 0xc2, 0x60, 0x5c, 0x47, 0x59, 0x15, 0xbf, 0x08, 0x47, 0x6d, 0xe4, 0xb8, 0xaa, 0x70, 0x29, 0x8a, 0xb9, 0x9d, 0xef, 0x93, 0x86, 0xc1, 0xf1, 0x12, 0x53, 0xc3, 0x98, 0xc6, 0xd0, 0xad, 0xf9, 0xd9, 0x7e, 0x22, 0x64, 0xa0, 0x26, 0xe4, 0x02, 0x11, 0xb5, 0x9a, 0x26, 0xa2, 0x3f, 0x16, 0x10, 0x2a, 0x22, 0x0a, 0x6f, 0x2b, 0xf2, 0x7a, 0x14, 0x01, 0x5f, 0x6f, 0x32, 0x61, 0xe2, 0x74, 0x75, 0x8c, 0xcc, 0xb7, 0x57, 0xa4, 0x06, 0x00, 0x53, 0x17, 0xa0, 0x50, 0xc2, 0x2d, 0x39, 0x9f, 0x99, 0x49, 0x74, 0xaa, 0x73, 0x13, 0xed, 0xfb, 0xba, 0x46, 0x08, 0x37, 0x16, 0x13, 0x98, 0x54, 0x81, 0xb0, 0xae, 0xc8, 0x9e, 0xdd, 0x60, 0x02, 0x75, 0x4b, 0x18, 0xe2, 0x75, 0xb9, 0x7a, 0xf8, 0xb4, 0xad, 0xc6, 0x82, 0xb5, 0x73, 0xb9, 0xa5, 0x68, 0x73, 0x24, 0x23, 0xb2, 0x0d, 0xf4, 0x18, 0xda, 0x0a, 0x0f, 0x69, 0x08, 0x66, 0x3b, 0xe9, 0x83, 0x3e, 0xda, 0x12, 0x69, 0x12, 0x77, 0x02, 0xe9, 0x7d, 0xb8, 0x2b, 0xb1, 0x1d, 0xe2, 0x2c, 0xc0, 0x76, 0x5e, 0x26, 0xca, 0xb6, 0x0d, 0x25, 0x6c, 0xbb, 0x27, 0x22, 0x13, 0x15, 0xc2, 0xc1, 0xd7, 0x5f, 0x56, 0xe6, 0xaa, 0x4c, 0x08, 0xcc, 0x83, 0x45, 0xa1, 0x6b, 0x68, 0x00, 0xe3, 0x30, 0x75, 0x6c, 0xec, 0x02, 0x67, 0xc0, 0x2d, 0x1d, 0xe1, 0xca, 0x3c, 0xa8, 0x73, 0x81, 0x56, 0xc8, 0x8e, 0xd6, 0xae, 0x90, 0xf8, 0x42, 0x9b, 0x5a, 0xad, 0x8c, 0x5a, 0x53, 0xfe, 0x26, 0x87, 0xd2, 0x07, 0x4f, 0xdb, 0x18, 0xb1, 0x24, 0x1a, 0x48, 0x9e, 0x85, 0x50, 0xab, 0xaa, 0x7b, 0x55, 0x9a, 0xcc, 0x6a, 0xb4, 0xb5, 0x39, 0x6c, 0x82, 0x1b, 0x85, 0x43, 0x05, 0xca, 0xa6, 0x6a, 0x47, 0x80, 0x39, 0xcc, 0x2c, 0xf7, 0x36, 0x5f, 0x56, 0xa3, 0x44, 0xd1, 0xf0, 0x9a, 0xa7, 0x3a, 0x66, 0x7a, 0x15, 0xce, 0x71, 0xb2, 0x10, 0xd9, 0xb9, 0x30, 0x40, 0x3a, 0x38, 0xa2, 0xa1, 0x0c, 0xde, 0xf3, 0x9b, 0x9e, 0x89, 0x60, 0xad, 0x46, 0x33, 0x13, 0xb7, 0xab, 0x3d, 0x72, 0x3a, 0x71, 0x5c, 0x1d, 0x72, 0x9b, 0x79, 0xb4, 0x6b, 0x7b, 0xce, 0xdb, 0x31, 0xb9, 0x2b, 0x77, 0x86, 0x4a, 0xc9, 0x14, 0x6c, 0x15, 0xa8, 0x9b, 0xaf, 0xe1, 0x60, 0x1f, 0xcc, 0x83, 0x28, 0xe6, 0x57, 0xa6, 0xeb, 0xba, 0xbe, 0xf8, 0x11, 0x59, 0x86, 0xdc, 0x87, 0xf1, 0x72, 0x34, 0xba, 0xa3, 0x88, 0x5e, 0x33, 0xa1, 0x85, 0x68, 0x8b, 0x91, 0x58, 0x83, 0xec, 0x48, 0x09, 0xc5, 0xc9, 0x69, 0x1b, 0x95, 0xa0, 0x81, 0x79, 0xa4, 0x85, 0x77, 0xc1, 0x72, 0x4a, 0xa1, 0xbc, 0xf6, 0x64, 0xd5, 0xea, 0x49, 0xc6, 0x9a, 0x72, 0x7c, 0xda, 0x3e, 0x31, 0xe7, 0x1e, 0x67, 0x25, 0x7e, 0x65, 0xe8, 0x47, 0xdf, 0x59, 0x47, 0xab, 0xe2, 0x96, 0x75, 0x73, 0xac, 0x2d, 0x61, 0x59, 0xf9, 0x66, 0x99, 0xae, 0x16, 0xa5, 0x5f, 0x65, 0x4e, 0x8f, 0xe0, 0x0b, 0xea, 0x67, 0x91, 0x13, 0x5a, 0xa0, 0x45, 0xd8, 0x51, 0xd0, 0xd7, 0x3c, 0xd1, 0x59, 0xbe, 0x5c, 0x00, 0x04, 0x1b, 0x10, 0x33, 0xaf, 0x18, 0x50, 0x0c, 0xc6, 0x2b, 0x8d, 0xc6, 0x36, 0xbe, 0xd7, 0x0e, 0x4d, 0xd4, 0x98, 0x1e, 0x37, 0x88, 0x20, 0xeb, 0x73, 0xa7, 0xd3, 0xbc, 0x69, 0xa4, 0x2d, 0xcb, 0x91, 0x03, 0xec, 0x8b, 0xb8, 0x02, 0x07, 0x63, 0xba, 0x76, 0xb4, 0x82, 0x11, 0x80, 0x65, 0x29, 0x55, 0x3d, 0xa6, 0x48, 0x75, 0x39, 0x89, 0x47, 0x22, 0x44, 0x36, 0x72, 0xbc, 0x7e, 0xc3, 0x16, 0x46, 0x15, 0x8c, 0xa6, 0x63, 0x43, 0xe2, 0xe6, 0x9b, 0xd6, 0x38, 0xcc, 0x4a, 0x3c, 0x71, 0x1e, 0x37, 0x75, 0xce, 0x88, 0xb4, 0x96, 0x8a, 0x2c, 0xdb, 0xb7, 0x72, 0xa0, 0xd9, 0xaf, 0x6a, 0xa3, 0x91, 0x68, 0x55, 0x00, 0x74, 0xa6, 0x58, 0x2d, 0xa1, 0x93, 0x66, 0xf6, 0x1b, 0xe1, 0x74, 0x03, 0x44, 0x72, 0x18, 0x2d, 0x90, 0x0c, 0x05, 0x98, 0x36, 0x9a, 0x6c, 0x65, 0x6d, 0x30, 0xc9, 0x95, 0x57, 0xaa, 0xf6, 0xe4, 0x30, 0x23, 0xf4, 0x17, 0xbc, 0x4a, 0x2d, 0x8e, 0x29, 0x44, 0xc4, 0xe6, 0x01, 0x01, 0x52, 0xbf, 0x28, 0xeb, 0x21, 0x19, 0xa9, 0x04, 0x67, 0xaa, 0x18, 0x57, 0x06, 0x39, 0x6f, 0x93, 0x37, 0x22, 0xf1, 0x93, 0x73, 0xd3, 0x43, 0x1b, 0x01, 0x7b, 0x79, 0x4a, 0x19, 0xb9, 0x8b, 0x39, 0x90, 0x18, 0x8b, 0xcc, 0x71, 0x42, 0xcd, 0x23, 0xa7, 0x5a, 0x28, 0xa9, 0x5d, 0x2c, 0x25, 0xaa, 0xf7, 0xc2, 0xdf, 0xd8, 0xba, 0x06, 0xe4, 0x70, 0x66, 0x94, 0x0c, 0x1f, 0xa5, 0x56, 0x55, 0xda, 0xb9, 0xbe, 0xb6, 0x86, 0x42, 0x8c, 0x72, 0xe9, 0x00, 0x70, 0xf8, 0x1a, 0x6b, 0xfb, 0x63, 0x45, 0x76, 0x61, 0x51, 0xff, 0xc0, 0x59, 0xea, 0x64, 0x25, 0x5f, 0xb2, 0x4a, 0xa3, 0xe4, 0x7c, 0xfc, 0x01, 0x30, 0x0f, 0x43, 0x91, 0x1a, 0xe3, 0x93, 0xe6, 0xd7, 0xa8, 0x9e, 0x1c, 0x22, 0x8f, 0x3b, 0x55, 0xd7, 0x0b, 0x9d, 0x9d, 0x4b, 0x5c, 0xc0, 0x06, 0x71, 0xad, 0x0b, 0x69, 0x48, 0x67, 0x4a, 0x29, 0x69, 0x52, 0xff, 0x57, 0x65, 0xa3, 0x75, 0x2c, 0x93, 0xc8, 0x7e, 0xe6, 0x15, 0xc6, 0x83, 0xe3, 0xa1, 0xf7, 0x91, 0x4d, 0x2c, 0x72, 0x53, 0x4e, 0x6b, 0xb2, 0x31, 0xbb, 0x10, 0x16, 0xea, 0x60, 0xe7, 0xa5, 0xb8, 0x97, 0xe3, 0x2e, 0x4d, 0x62, 0xa3, 0x83, 0x94, 0x5f, 0xd9, 0x91, 0x36, 0xbf, 0xe7, 0xcf, 0x14, 0x48, 0x49, 0xec, 0xaa, 0x4a, 0x05, 0x47, 0xc0, 0x40, 0x99, 0x9a, 0x55, 0xf2, 0x49, 0x75, 0x27, 0xc5, 0x72, 0xeb, 0xcb, 0x2f, 0xec, 0x46, 0xeb, 0x29, 0x41, 0x07, 0xf4, 0xbf, 0x64, 0x79, 0x6b, 0xe4, 0xbc, 0x99, 0xbc, 0x6b, 0x86, 0xb2, 0x98, 0x60, 0x51, 0x57, 0x45, 0xf5, 0xb4, 0x04, 0xec, 0x79, 0x09, 0x3b, 0xb3, 0x6f, 0xc7, 0xbb, 0xad, 0x79, 0xb6, 0xc0, 0xc8, 0xa3, 0xba, 0x4e, 0xdb, 0x56, 0xa4, 0xc8, 0x8f, 0xf9, 0x47, 0x8b, 0x74, 0xe7, 0xc9, 0x0b, 0x2c, 0x25, 0x69, 0x08, 0x82, 0xac, 0x84, 0x51, 0x8d, 0x51, 0x11, 0xff, 0xa3, 0x6f, 0xf1, 0xe4, 0x9b, 0x5b, 0xbc, 0x5a, 0xf4, 0xe5, 0x7b, 0xc2, 0x02, 0xaf, 0x12, 0x5c, 0x66, 0x08, 0x2a, 0x30, 0x4d, 0xda, 0x86, 0xed, 0xb6, 0x06, 0xb6, 0x43, 0x73, 0xab, 0xb6, 0x68, 0x3b, 0x56, 0x94, 0x96, 0x61, 0xab, 0x60, 0xc0, 0x11, 0xe1, 0x4c, 0x2b, 0x23, 0xc8, 0x92, 0x35, 0x87, 0xa9, 0x74, 0xcc, 0x79, 0x57, 0x4c, 0x82, 0x95, 0x62, 0x10, 0x91, 0x80, 0x1d, 0x37, 0x23, 0x97, 0x57, 0x85, 0x58, 0x31, 0x69, 0xc3, 0x58, 0xd1, 0x82, 0x59, 0x6c, 0x34, 0x4b, 0x22, 0x96, 0x4a, 0x40, 0x95, 0x8b, 0x22, 0x72, 0xba, 0xfb, 0x0f, 0xfd, 0x2b, 0xcc, 0xe4, 0xb1, 0x4f, 0x02, 0x10, 0xcb, 0xc8, 0x14, 0x47, 0x6f, 0x40, 0x47, 0xf4, 0x80, 0x56, 0x83, 0x96, 0x74, 0x2b, 0x01, 0x23, 0x32, 0xa1, 0xa1, 0x19, 0x10, 0x56, 0xdf, 0xb9, 0xb4, 0x3a, 0x75, 0x7b, 0xa6, 0xac, 0x37, 0xbc, 0x66, 0x62, 0xe4, 0x33, 0xca, 0xf1, 0x59, 0x83, 0x95, 0xe6, 0x4f, 0xa9, 0xa7, 0x2f, 0x3b, 0x71, 0x00, 0x6a, 0xeb, 0x8e, 0xb3, 0x73, 0x76, 0xfd, 0xd6, 0x17, 0x4a, 0xe0, 0x60, 0x5a, 0x6b, 0x53, 0x2a, 0xb6, 0x14, 0xf0, 0x26, 0x41, 0xae, 0x56, 0x3b, 0xf2, 0x30, 0x19, 0x00, 0xf4, 0x01, 0xed, 0xd3, 0xb4, 0x31, 0xd3, 0x90, 0xa9, 0xea, 0x4a, 0x2b, 0x36, 0x9b, 0xcf, 0xf4, 0xb8, 0x38, 0xe8, 0x4a, 0x88, 0x79, 0x91, 0xa1, 0x67, 0xc8, 0x68, 0xcc, 0x9b, 0xa1, 0x6b, 0x3c, 0x31, 0x89, 0xb3, 0xe1, 0x90, 0x8f, 0x73, 0x64, 0x60, 0x4f, 0x38, 0x2a, 0x2a, 0x0a, 0x85, 0xc8, 0xe3, 0x41, 0x98, 0x1b, 0x9f, 0xec, 0x47, 0x33, 0x30, 0x2a, 0x1e, 0xdb, 0x44, 0x71, 0x9e, 0x3b, 0x53, 0x7b, 0x77, 0x0b, 0x23, 0x85, 0x7a, 0x68, 0xf3, 0x3f, 0x91, 0xbc, 0x80, 0x31, 0x1c, 0x93, 0x2a, 0x00, 0x59, 0x00, 0xfb, 0x6c, 0xe1, 0xd3, 0xa7, 0x3a, 0x33, 0x95, 0xe0, 0xe0, 0x3d, 0x54, 0xdc, 0x25, 0xa6, 0x37, 0xb6, 0xf7, 0x74, 0x09, 0xb5, 0xc1, 0x78, 0x4c, 0x82, 0x0a, 0x15, 0xaa, 0x65, 0xb3, 0x51, 0xc6, 0x1b, 0x04, 0xa0, 0x63, 0xcc, 0xcb, 0x74, 0x59, 0x4d, 0x6d, 0x07, 0x9b, 0x82, 0xc2, 0xbc, 0x40, 0x54, 0x01, 0xec, 0x72, 0xbf, 0x5e, 0x39, 0x9d, 0x20, 0x09, 0x32, 0x86, 0x8c, 0x22, 0xb4, 0xc9, 0x1b, 0x9b, 0x87, 0x7f, 0x1d, 0x76, 0x81, 0x61, 0x2a, 0x06, 0x8e, 0x8b, 0x79, 0xd0, 0xd2, 0x2c, 0x42, 0x26, 0xa4, 0xed, 0xe1, 0x6b, 0x5a, 0x50, 0x69, 0x87, 0xb4, 0x78, 0x1a, 0x24, 0x44, 0xfc, 0x75, 0xc2, 0x84, 0x5a, 0xac, 0x17, 0x57, 0x63, 0x81, 0x45, 0x32, 0x23, 0x56, 0x03, 0x89, 0x43, 0xa2, 0x00, 0xab, 0x82, 0xe4, 0x17, 0xa3, 0x54, 0xea, 0xa7, 0xde, 0xf9, 0x50, 0x45, 0x2b, 0x67, 0xce, 0xe8, 0x33, 0xfd, 0x67, 0x16, 0xfb, 0xa6, 0x91, 0xc0, 0x26, 0xc5, 0xdf, 0x65, 0x4c, 0x21, 0xf4, 0x17, 0xa0, 0xa2, 0x4b, 0xbe, 0x4a, 0x4a, 0x94, 0xc3, 0xc6, 0x46, 0xd5, 0xc0, 0xd1, 0xa8, 0xa3, 0xd8, 0x5b, 0x27, 0x49, 0x22, 0x2a, 0xfe, 0x07, 0x0b, 0x0f, 0x01, 0x5c, 0x94, 0x89, 0x1b, 0xd9, 0x19, 0xb6, 0x58, 0xf1, 0x21, 0x75, 0x55, 0xcc, 0xd7, 0x72, 0x9d, 0x92, 0x0b, 0x59, 0x3f, 0xf6, 0x31, 0xca, 0xc0, 0x7e, 0x2d, 0xe9, 0x53, 0xcd, 0xd6, 0xbe, 0xa0, 0x61, 0x16, 0x58, 0x93, 0xa2, 0xfd, 0xb8, 0x79, 0x19, 0x0a, 0x08, 0x34, 0x3c, 0x96, 0xa6, 0xcc, 0xca, 0x76, 0x26, 0x49, 0x38, 0xd2, 0x2b, 0x27, 0x16, 0x48, 0x02, 0x61, 0xcf, 0x80, 0x9b, 0x81, 0xa8, 0x03, 0x97, 0x68, 0xb3, 0xcc, 0xb1, 0xf9, 0x10, 0xfa, 0x5c, 0x5e, 0x03, 0xb2, 0x5c, 0xeb, 0x7b, 0x41, 0x8f, 0x5b, 0xa3, 0x9b, 0x8c, 0x71, 0x3e, 0x63, 0x92, 0x04, 0x5b, 0x58, 0xe1, 0xc9, 0x2d, 0x73, 0xa4, 0x4e, 0xe1, 0x80, 0x28, 0x2e, 0xb2, 0xb4, 0x74, 0xd3, 0x46, 0x4c, 0xf4, 0xaa, 0x48, 0x23, 0xaf, 0xcb, 0x28, 0x5e, 0x4a, 0x01, 0x8b, 0xa8, 0xa7, 0xc4, 0x76, 0x97, 0x0d, 0xa0, 0xe2, 0x9d, 0xe5, 0xf6, 0x99, 0xf0, 0x68, 0x46, 0x5d, 0x6a, 0x36, 0xd0, 0x12, 0x35, 0x1f, 0x46, 0x99, 0x5a, 0x7c, 0x30, 0x3a, 0x3a, 0xae, 0x26, 0xa7, 0xaf, 0xbd, 0x99, 0x62, 0xed, 0x60, 0xa9, 0xdd, 0xe9, 0x5b, 0x4b, 0xf8, 0xac, 0x7a, 0x47, 0x49, 0x3c, 0xf6, 0x1e, 0xe3, 0xf2, 0x9b, 0xa0, 0x46, 0xce, 0x15, 0xa1, 0x76, 0x3f, 0x0c, 0x21, 0xfa, 0xba, 0x24, 0x67, 0x00, 0xad, 0x54, 0x09, 0xb0, 0xad, 0xdc, 0xcc, 0x97, 0x79, 0xa4, 0xd1, 0xfc, 0x45, 0xec, 0x26, 0x1f, 0x04, 0x8b, 0x9c, 0x9d, 0xaa, 0x38, 0xc9, 0xec, 0x22, 0x8b, 0x65, 0x05, 0xe8, 0x90, 0x52, 0x26, 0xb3, 0x84, 0x86, 0x80, 0x20, 0x59, 0xc2, 0xc5, 0xc8, 0x96, 0x01, 0x56, 0x06, 0x34, 0xcb, 0x13, 0x37, 0xb1, 0x31, 0x53, 0x65, 0x14, 0x48, 0x42, 0xbc, 0x40, 0x5a, 0x29, 0x2e, 0x68, 0x3c, 0xaf, 0xa4, 0x51, 0x45, 0x26, 0x94, 0x5c, 0x4d, 0xfb, 0x68, 0xee, 0x2a, 0xcd, 0xb8, 0xb7, 0x95, 0x32, 0x83, 0x66, 0x96, 0xd5, 0x31, 0x25, 0xa0, 0x45, 0xbd, 0xbb, 0x8a, 0x3b, 0xcc, 0x81, 0x23, 0x08, 0x3d, 0x1e, 0x68, 0x2c, 0x5b, 0xd7, 0x82, 0x0c, 0x76, 0xc4, 0x48, 0x35, 0x11, 0x51, 0x47, 0x4f, 0x69, 0xd6, 0x01, 0xd7, 0x70, 0x8d, 0xbb, 0x2c, 0x97, 0x9d, 0x77, 0x52, 0x74, 0x94, 0xb6, 0x85, 0x20, 0xa8, 0xff, 0x66, 0xc3, 0x41, 0x62, 0xca, 0x2a, 0xec, 0x80, 0x72, 0xa2, 0xa5, 0x1f, 0xf2, 0x59, 0x38, 0x96, 0x48, 0xe7, 0x5b, 0x95, 0xc1, 0x6a, 0xbe, 0x14, 0x60, 0x4e, 0xdb, 0xfa, 0xba, 0xf4, 0x00, 0xb7, 0x6a, 0x7a, 0x0f, 0x07, 0xdb, 0x61, 0xdc, 0xe1, 0x91, 0x02, 0xf4, 0x3b, 0x2d, 0x10, 0x60, 0x74, 0x7b, 0x02, 0xc4, 0x42, 0x54, 0x85, 0x34, 0x1f, 0xd5, 0xd9, 0xbf, 0xfa, 0xa7, 0x01, 0x60, 0x61, 0x37, 0x49, 0x63, 0xb9, 0x85, 0x20, 0x9c, 0x6b, 0x9a, 0x7d, 0xb3, 0xf9, 0x49, 0x58, 0x31, 0x1d, 0x02, 0x79, 0x00, 0xa3, 0xd8, 0xc4, 0x4f, 0x84, 0x35, 0xb0, 0x93, 0xa2, 0x36, 0xa0, 0x50, 0x9f, 0x19, 0x28, 0xdf, 0x77, 0x19, 0xce, 0x8c, 0x4e, 0x90, 0x22, 0x8f, 0x4d, 0xb8, 0x7c, 0xb9, 0xe8, 0x82, 0xf2, 0x71, 0x21, 0x80, 0x23, 0x88, 0x45, 0xd3, 0x1e, 0xb9, 0x06, 0xc6, 0x0e, 0xb6, 0x3e, 0x0f, 0xf5, 0x5e, 0x84, 0xb8, 0x67, 0xa9, 0x1b, 0x79, 0xae, 0x74, 0xa0, 0x3a, 0xc0, 0x04, 0x73, 0xc8, 0xc1, 0xb3, 0xe6, 0xae, 0xdc, 0xc3, 0x7f, 0x1e, 0x69, 0xb8, 0xe1, 0x36, 0x01, 0x9b, 0xdb, 0x01, 0xc3, 0x74, 0xa1, 0x22, 0xe1, 0x64, 0xc3, 0x25, 0x84, 0xb2, 0xfb, 0xcf, 0x5e, 0x01, 0x3a, 0x45, 0x12, 0x7c, 0x89, 0x33, 0x26, 0xb6, 0x86, 0x03, 0x78, 0xcb, 0x55, 0x25, 0xa4, 0x8b, 0x52, 0x2b, 0x30, 0x13, 0x2b, 0x76, 0x88, 0x21, 0x4b, 0x69, 0x80, 0x8d, 0xd1, 0x9a, 0xa4, 0xff, 0x03, 0x3e, 0x16, 0x25, 0x20, 0x16, 0xfc, 0x94, 0x79, 0x22, 0x24, 0x24, 0x39, 0x3e, 0x51, 0xdb, 0x71, 0x15, 0xe3, 0x81, 0x14, 0xe6, 0x89, 0x3c, 0xdc, 0xc8, 0xae, 0x11, 0x17, 0xa4, 0x31, 0x65, 0x48, 0x01, 0x0a, 0xb4, 0x62, 0x9f, 0xb6, 0x72, 0x14, 0x8d, 0x03, 0x1a, 0x6c, 0x60, 0x1a, 0x6a, 0x4a, 0x66, 0x1d, 0x87, 0x2d, 0x8e, 0xf6, 0x93, 0x75, 0x0a, 0x11, 0x59, 0x58, 0x71, 0x6a, 0xb9, 0x26, 0x3e, 0xb0, 0x51, 0x63, 0x57, 0x10, 0x23, 0x58, 0xcd, 0xe5, 0x25, 0x64, 0x64, 0x80, 0x5c, 0xa8, 0xf5, 0x96, 0x61, 0x75, 0x1a, 0xd6, 0xa4, 0x75, 0xa7, 0xec, 0x78, 0xcb, 0x73, 0x19, 0xc3, 0xbb, 0xc5, 0x44, 0xe1, 0xbb, 0x11, 0x85, 0xaa, 0xae, 0xb7, 0x51, 0xba, 0x0b, 0x39, 0x23, 0x24, 0x6e, 0x33, 0xf4, 0x0a, 0x4f, 0xf4, 0x78, 0x0b, 0x74, 0x53, 0x62, 0xa2, 0x18, 0xd1, 0x69, 0x47, 0x4d, 0x72, 0x08, 0xa9, 0xf7, 0x57, 0x72, 0x28, 0x30, 0x8a, 0xf2, 0x0f, 0x8d, 0x24, 0x03, 0xa2, 0x74, 0x77, 0xcf, 0x53, 0xcf, 0xf1, 0x33, 0xa2, 0x47, 0xd5, 0xc2, 0xb2, 0x98, 0xbf, 0x21, 0xba, 0xc6, 0xdc, 0x44, 0x64, 0x9e, 0x63, 0xaf, 0xce, 0xf5, 0x4a, 0xd3, 0xa0, 0x7a, 0x74, 0xe4, 0x47, 0xb3, 0x6b, 0xac, 0xca, 0x29, 0x5e, 0x05, 0x33, 0x68, 0xef, 0x7c, 0x14, 0x6e, 0x1c, 0x28, 0xed, 0xb3, 0x1b, 0x37, 0x77, 0xc9, 0x41, 0xa7, 0xc2, 0x7d, 0xc5, 0x59, 0x43, 0x7b, 0x0f, 0xf8, 0x3c, 0x29, 0x10, 0xf8, 0x27, 0xef, 0x24, 0x4d, 0x77, 0x26, 0xaf, 0x2b, 0x97, 0x08, 0x65, 0x4b, 0xcf, 0xb1, 0x39, 0xa2, 0x68, 0x44, 0xc6, 0xf4, 0xb7, 0x9c, 0xd9, 0xe4, 0x74, 0x70, 0x65, 0xa7, 0x75, 0x96, 0xb9, 0x27, 0xf9, 0x6c, 0xbd, 0xbc, 0x72, 0x67, 0xac, 0x9e, 0x32, 0xac, 0x39, 0x6f, 0x6c, 0x4c, 0xe7, 0x39, 0xaa, 0x0a, 0xa6, 0x0f, 0xcc, 0xac, 0x17, 0x8e, 0xda, 0xb1, 0xe0, 0x46, 0x88, 0xfe, 0x71, 0xa7, 0x42, 0x01, 0xa9, 0x9b, 0xc6, 0x4b, 0x55, 0xf8, 0xcb, 0x89, 0xe1, 0x15, 0x45, 0xe5, 0x27, 0x5a, 0xf4, 0x86, 0x26, 0xec, 0x66, 0x75, 0x20, 0xba, 0x8a, 0x7c, 0x88, 0xc2, 0x30, 0x7e, 0x79, 0x34, 0x55, 0xef, 0x87, 0x80, 0xfa, 0xe1, 0x64, 0x12, 0xea, 0x59, 0xe9, 0x24, 0x06, 0xf5, 0x95, 0x90, 0x2d, 0xc2, 0x1c, 0x61, 0x2b, 0x14, 0x28, 0x01, 0xcf, 0x31, 0xab, 0xc0, 0x47, 0x5c, 0x7b, 0xde, 0x77, 0x2d, 0x51, 0xc5, 0x5a, 0x2d, 0xfc, 0x65, 0x1b, 0xc5, 0xab, 0x41, 0x43, 0x02, 0x28, 0x13, 0xcc, 0x4c, 0x8c, 0xc6, 0xf5, 0x2c, 0x8d, 0x27, 0xe3, 0xcd, 0x78, 0x51, 0x84, 0x9a, 0x8c, 0x43, 0x43, 0xf0, 0xc7, 0xed, 0x6c, 0x6c, 0xb9, 0xf7, 0x65, 0xc5, 0x04, 0x7e, 0x55, 0xbc, 0x48, 0xaa, 0xd5, 0xb9, 0x32, 0x12, 0x82, 0x87, 0xf7, 0x09, 0x39, 0xdb, 0x75, 0x3a, 0x61, 0xc0, 0xd7, 0xdb, 0x18, 0x30, 0xc2, 0x56, 0x28, 0x8c, 0x1c, 0x85, 0xcc, 0x9b, 0xbc, 0xe5, 0x83, 0x66, 0xda, 0xc5, 0x28, 0xc8, 0x93, 0xd6, 0x1b, 0x69, 0x85, 0x0b, 0xcb, 0x82, 0x75, 0x8e, 0x83, 0x69, 0x36, 0xe1, 0xf8, 0x16, 0x38, 0x61, 0x58, 0x64, 0x82, 0xca, 0xd3, 0x5b, 0x4d, 0xb1, 0x43, 0x7f, 0xad, 0x69, 0x80, 0xb6, 0x62, 0x80, 0xb1, 0x65, 0x2d, 0x72, 0xf5, 0x24, 0x07, 0xa8, 0x01, 0x5f, 0x85, 0xc2, 0x9e, 0x75, 0xb2, 0x15, 0x89, 0x33, 0xa4, 0xf5, 0x88, 0x7d, 0xb3, 0x20, 0xb5, 0x83, 0xcd, 0xcb, 0xca, 0x27, 0x4e, 0xac, 0x21, 0xf8, 0x70, 0x28, 0x79, 0xb8, 0xbc, 0x4a, 0xfb, 0x62, 0xba, 0x05, 0x6d, 0x14, 0x65, 0x12, 0x92, 0x15, 0x54, 0xc7, 0x65, 0x46, 0x4d, 0x4c, 0x96, 0xbd, 0x3c, 0x9a, 0x97, 0x20, 0x18, 0x7c, 0x33, 0x39, 0xd0, 0x59, 0x3b, 0xc4, 0xbb, 0xa5, 0x91, 0x55, 0x46, 0x9f, 0xf6, 0xb8, 0x68, 0x8a, 0x5f, 0xc5, 0xfa, 0x6b, 0x46, 0xd4, 0x07, 0x06, 0x68, 0xbd, 0x16, 0x8c, 0x5f, 0x79, 0x64, 0x92, 0x76, 0x09, 0x40, 0x99, 0x99, 0x27, 0x62, 0x82, 0x36, 0xb2, 0x41, 0x29, 0x68, 0x43, 0x8d, 0x2c, 0xbc, 0x2a, 0x97, 0x8a, 0xbc, 0x09, 0x73, 0x20, 0x29, 0x1b, 0x0e, 0xd7, 0xe4, 0x63, 0x1e, 0xc9, 0xbb, 0xe2, 0x8a, 0xc6, 0x3a, 0xb6, 0x86, 0x0e, 0x97, 0x6a, 0xc1, 0x55, 0x2a, 0xfc, 0x43, 0x89, 0x7d, 0x69, 0x37, 0xa0, 0x92, 0x43, 0x2d, 0xc4, 0x81, 0xa9, 0x14, 0xc3, 0xa1, 0x27, 0x3c, 0x43, 0x00, 0x9e, 0x8e, 0xc5, 0x23, 0xcb, 0x93, 0xce, 0xd9, 0x89, 0x8f, 0x90, 0x90, 0x53, 0x40, 0xba, 0x6e, 0x01, 0xbc, 0x57, 0x2d, 0x03, 0xa8, 0x93, 0xfa, 0x21, 0xc4, 0x34, 0x2d, 0x88, 0xdc, 0x3e, 0x77, 0xb3, 0x3b, 0x1f, 0xc0, 0x63, 0xdc, 0xdb, 0x68, 0x9d, 0x8c, 0x4f, 0xfc, 0x84, 0x0c, 0xe8, 0x79, 0xcf, 0xb3, 0x47, 0x13, 0x85, 0x51, 0x2c, 0xc7, 0xc7, 0x59, 0x13, 0x83, 0xb1, 0xfa, 0xc8, 0x98, 0x32, 0xbb, 0x1c, 0xb3, 0x32, 0x4e, 0x6d, 0x28, 0x68, 0x91, 0x88, 0x44, 0xcb, 0x20, 0xca, 0x4d, 0xf8, 0x12, 0xb4, 0x28, 0x24, 0x19, 0x2a, 0x43, 0x38, 0x04, 0x30, 0xa3, 0x7a, 0x7f, 0x3a, 0xc4, 0x1e, 0xd0, 0x64, 0xcf, 0xe0, 0x55, 0x15, 0x7b, 0x91, 0xb5, 0xc0, 0x10, 0x8f, 0xb7, 0xa6, 0x13, 0xa0, 0x11, 0x2a, 0xf4, 0xd6, 0x4e, 0x48, 0xf8, 0xa3, 0x45, 0x32, 0x8a, 0x99, 0xb7, 0xbf, 0x0c, 0x91, 0xcb, 0x03, 0x72, 0x15, 0xb0, 0x17, 0x7a, 0xd4, 0xc2, 0x63, 0xe6, 0xd7, 0x8f, 0x59, 0x58, 0xc8, 0x48, 0x15, 0x8e, 0x4f, 0xd2, 0x11, 0x7c, 0x24, 0x8e, 0x0c, 0xab, 0x3c, 0xf9, 0x8c, 0x1e, 0x27, 0x86, 0x88, 0x38, 0xf8, 0x42, 0x8b, 0xa0, 0x56, 0x2d, 0xf6, 0xb6, 0x1e, 0x87, 0x36, 0xe2, 0xb8, 0xb2, 0x66, 0x60, 0x79, 0x18, 0xe0, 0xce, 0x2c, 0xe3, 0xaf, 0x67, 0xc8, 0x1f, 0xa5, 0xc2, 0xa4, 0xd2, 0xbc, 0x8e, 0x87, 0x18, 0x25, 0xb7, 0x02, 0xb3, 0xbe, 0xca, 0x39, 0x7b, 0x33, 0xa5, 0x18, 0xda, 0xc8, 0xb1, 0x39, 0x3d, 0x49, 0x4a, 0x90, 0x90, 0x0c, 0x01, 0xb5, 0x59, 0x25, 0x85, 0x7c, 0xbf, 0x80, 0x27, 0x05, 0x1d, 0x36, 0xa4, 0xf1, 0x41, 0xa4, 0xd2, 0xdc, 0x44, 0x03, 0x41, 0x30, 0x5e, 0x03, 0x3c, 0xb5, 0x0a, 0x07, 0x4b, 0xe4, 0x59, 0xc7, 0x6a, 0x33, 0x9a, 0x9a, 0x52, 0xc4, 0x47, 0x36, 0x0d, 0xea, 0x2a, 0x56, 0x99, 0xcc, 0xea, 0x68, 0x3a, 0x42, 0x43, 0x0a, 0xa6, 0xfc, 0x95, 0x45, 0xc7, 0x5c, 0x04, 0x92, 0x64, 0x1a, 0xf7, 0xa4, 0xe9, 0x26, 0x7b, 0xcc, 0x38, 0x4e, 0x55, 0x71, 0x4c, 0xf4, 0x97, 0x41, 0xeb, 0xa3, 0xb6, 0x9d, 0x64, 0x17, 0xa5, 0x55, 0x47, 0x5d, 0x3c, 0x02, 0x11, 0x12, 0xb8, 0xb3, 0x58, 0x8c, 0x63, 0x74, 0x7b, 0x5c, 0xe2, 0xcc, 0xfe, 0xe9, 0x12, 0x97, 0xfa, 0x41, 0x9f, 0x9c, 0x42, 0x98, 0x97, 0x8f, 0xff, 0x08, 0x70, 0xd8, 0xa8, 0x55, 0xb4, 0x88, 0x99, 0xca, 0x9b, 0xb4, 0x7d, 0x83, 0x6d, 0x62, 0xd2, 0x03, 0x8c, 0xc3, 0x81, 0x6f, 0x3a, 0x69, 0x8b, 0xb3, 0xbb, 0xff, 0x78, 0xc7, 0xa0, 0x15, 0xb0, 0xea, 0x19, 0x60, 0x63, 0x42, 0x92, 0xe1, 0xd5, 0x0b, 0x03, 0xe1, 0x04, 0x3a, 0x98, 0xca, 0x9b, 0x27, 0x06, 0x3e, 0x66, 0x8b, 0x05, 0xe2, 0xc1, 0x7d, 0x69, 0x2d, 0x38, 0x2b, 0x18, 0x13, 0x65, 0xa8, 0x18, 0x51, 0x8e, 0xc7, 0x47, 0x72, 0x03, 0x37, 0xca, 0x18, 0x68, 0x59, 0x6a, 0xf4, 0x2a, 0x90, 0xfa, 0xb1, 0x87, 0x03, 0x73, 0xd7, 0x4b, 0x8f, 0x6d, 0x42, 0xac, 0x86, 0xb1, 0x8b, 0xca, 0x3a, 0xb0, 0x47, 0x64, 0x68, 0x0c, 0xf2, 0x06, 0x0c, 0x52, 0x9a, 0xbe, 0x5b, 0x8e, 0xf4, 0x47, 0x4d, 0xc8, 0xcc, 0x47, 0xa8, 0x03, 0x3e, 0xbd, 0x88, 0x4d, 0x3e, 0x0a, 0x0f, 0x1a, 0x94, 0x42, 0x0d, 0x8a, 0x3c, 0x91, 0x62, 0xb7, 0xaf, 0x87, 0xa2, 0xc8, 0xa3, 0x94, 0x64, 0x74, 0x34, 0xf4, 0xa3, 0xbc, 0x2b, 0x47, 0x78, 0x13, 0xac, 0x82, 0xcf, 0x38, 0x71, 0x85, 0xb5, 0x87, 0xf7, 0xf6, 0x89, 0x38, 0xec, 0xcd, 0xdd, 0x69, 0x34, 0xd1, 0x43, 0xba, 0x17, 0xbb, 0x4a, 0x71, 0x25, 0x66, 0xd2, 0xa5, 0x5a, 0xad, 0xdb, 0x33, 0x23, 0x71, 0x36, 0x67, 0x40, 0x1b, 0x4a, 0x20, 0xb8, 0x6c, 0x23, 0xbf, 0x10, 0x76, 0x43, 0x9c, 0xb6, 0xb8, 0xc1, 0x15, 0x38, 0x9d, 0xba, 0x4e, 0x6f, 0x0c, 0x91, 0x5b, 0xe7, 0x60, 0x2b, 0x97, 0x03, 0xb5, 0x35, 0x07, 0x0e, 0x4a, 0x5c, 0x56, 0x49, 0xa5, 0xd7, 0x08, 0x05, 0x15, 0x02, 0x67, 0x06, 0xb2, 0x60, 0x45, 0x75, 0xcb, 0xd0, 0x68, 0x7f, 0x27, 0x29, 0xa9, 0x2a, 0x99, 0x7d, 0x21, 0xea, 0x72, 0x00, 0xc4, 0x1e, 0xd8, 0x31, 0x52, 0x75, 0xf4, 0xc7, 0xb7, 0x2f, 0x9b, 0xc8, 0x5c, 0x0a, 0x13, 0xb9, 0xd0, 0x41, 0x58, 0x6f, 0xd5, 0x83, 0xfe, 0xb1, 0x2a, 0xfd, 0x5a, 0x40, 0x2d, 0xd3, 0x3b, 0x43, 0x54, 0x3f, 0x5f, 0xa4, 0xeb, 0x43, 0x6c, 0x8d, 0x9a, 0x2f, 0x53, 0x95, 0x08, 0x7f, 0x11, 0xd5, 0x8d, 0xbc, 0x1d, 0x25, 0x58, 0x8a, 0xe1, 0x10, 0x20, 0x9d, 0xaa, 0xab, 0x75, 0xdd, 0x95, 0x45, 0x76, 0xab, 0x40, 0xaa, 0x70, 0x99, 0x79, 0xd4, 0x3e, 0x2a, 0x2e, 0xa6, 0xc9, 0xc4, 0x76, 0xfc, 0x49, 0x37, 0xb0, 0x13, 0xc9, 0x93, 0xa7, 0x93, 0xd6, 0xc0, 0xab, 0x99, 0x60, 0x69, 0x5b, 0xa8, 0x38, 0xf6, 0x49, 0xda, 0x53, 0x9c, 0xa3, 0xd0];
    /// let key = botan::Privkey::load_kyber(&v).unwrap();
    /// let v2 = key.get_kyber_key().unwrap();
    /// assert_eq!(v, v2);
    /// ```
    pub fn get_kyber_key(&self) -> Result<Vec<u8>> {
        call_botan_ffi_viewing_vec_u8(&|ctx, cb| unsafe {
            botan_privkey_view_kyber_raw_key(self.obj, ctx, cb)
        })
    }

    /// Sign a message using the specified padding method
    pub fn sign(
        &self,
        message: &[u8],
        padding: &str,
        rng: &mut RandomNumberGenerator,
    ) -> Result<Vec<u8>> {
        let mut signer = Signer::new(self, padding)?;
        signer.update(message)?;
        signer.finish(rng)
    }

    /// Decrypt a message that was encrypted using the specified padding method
    pub fn decrypt(&self, ctext: &[u8], padding: &str) -> Result<Vec<u8>> {
        let mut decryptor = Decryptor::new(self, padding)?;
        decryptor.decrypt(ctext)
    }

    /// Perform key agreement
    pub fn agree(
        &self,
        other_key: &[u8],
        output_len: usize,
        salt: &[u8],
        kdf: &str,
    ) -> Result<Vec<u8>> {
        let mut op = KeyAgreement::new(self, kdf)?;
        op.agree(output_len, other_key, salt)
    }
}

impl Pubkey {
    pub(crate) fn from_handle(obj: botan_pubkey_t) -> Pubkey {
        Pubkey { obj }
    }

    pub(crate) fn handle(&self) -> botan_pubkey_t {
        self.obj
    }

    /// Load a DER encoded public key
    pub fn load_der(der: &[u8]) -> Result<Pubkey> {
        let obj = botan_init!(botan_pubkey_load, der.as_ptr(), der.len())?;
        Ok(Pubkey { obj })
    }

    /// Load a PEM encoded public key
    pub fn load_pem(pem: &str) -> Result<Pubkey> {
        let obj = botan_init!(
            botan_pubkey_load,
            make_cstr(pem)?.as_ptr() as *const u8,
            pem.len()
        )?;
        Ok(Pubkey { obj })
    }

    /// Load an RSA public key (n,e)
    pub fn load_rsa(n: &MPI, e: &MPI) -> Result<Pubkey> {
        let obj = botan_init!(botan_pubkey_load_rsa, n.handle(), e.handle())?;
        Ok(Pubkey { obj })
    }

    /// Load an DH public key (p,g,y)
    pub fn load_dh(p: &MPI, g: &MPI, y: &MPI) -> Result<Pubkey> {
        let obj = botan_init!(botan_pubkey_load_dh, p.handle(), g.handle(), y.handle())?;
        Ok(Pubkey { obj })
    }

    /// Load an DSA public key (p,q,g,y)
    pub fn load_dsa(p: &MPI, q: &MPI, g: &MPI, y: &MPI) -> Result<Pubkey> {
        let obj = botan_init!(
            botan_pubkey_load_dsa,
            p.handle(),
            q.handle(),
            g.handle(),
            y.handle()
        )?;
        Ok(Pubkey { obj })
    }

    /// Load an ElGamal public key (p,g,y)
    pub fn load_elgamal(p: &MPI, g: &MPI, y: &MPI) -> Result<Pubkey> {
        let obj = botan_init!(
            botan_pubkey_load_elgamal,
            p.handle(),
            g.handle(),
            y.handle()
        )?;
        Ok(Pubkey { obj })
    }

    /// Load an ECDSA public key (x,y) for the specified curve
    pub fn load_ecdsa(pub_x: &MPI, pub_y: &MPI, curve_name: &str) -> Result<Pubkey> {
        let curve_name = make_cstr(curve_name)?;
        let obj = botan_init!(
            botan_pubkey_load_ecdsa,
            pub_x.handle(),
            pub_y.handle(),
            curve_name.as_ptr()
        )?;
        Ok(Pubkey { obj })
    }

    /// Load an ECDH public key (x,y) for the specified curve
    pub fn load_ecdh(pub_x: &MPI, pub_y: &MPI, curve_name: &str) -> Result<Pubkey> {
        let curve_name = make_cstr(curve_name)?;
        let obj = botan_init!(
            botan_pubkey_load_ecdh,
            pub_x.handle(),
            pub_y.handle(),
            curve_name.as_ptr()
        )?;
        Ok(Pubkey { obj })
    }

    /// Load an Ed25519 public key
    pub fn load_ed25519(key: &[u8]) -> Result<Pubkey> {
        let obj = botan_init!(botan_pubkey_load_ed25519, key.as_ptr())?;
        Ok(Pubkey { obj })
    }

    /// Load an X25519 key
    pub fn load_x25519(key: &[u8]) -> Result<Pubkey> {
        let obj = botan_init!(botan_pubkey_load_x25519, key.as_ptr())?;
        Ok(Pubkey { obj })
    }

    #[cfg(feature = "botan3")]
    /// Load an Kyber key
    ///
    /// # Examples
    ///
    /// ```
    /// let v = vec![0x42; 800];
    /// let key = botan::Pubkey::load_kyber(&v).unwrap();
    /// ```
    /// ```
    /// let v = vec![0x42; 1184];
    /// let key = botan::Pubkey::load_kyber(&v).unwrap();
    /// ```
    /// ```
    /// let v = vec![0x42; 1568];
    /// let key = botan::Pubkey::load_kyber(&v).unwrap();
    /// ```
    ///
    /// Loading a key with the wrong size will cause an error to be returned.
    ///
    /// ```should_panic
    /// let v = vec![0x42; 799];
    /// let key = botan::Pubkey::load_kyber(&v).unwrap();
    /// ```
    pub fn load_kyber(key: &[u8]) -> Result<Pubkey> {
        let obj = botan_init!(botan_pubkey_load_kyber, key.as_ptr(), key.len())?;
        Ok(Pubkey { obj })
    }

    /// Return estimated bit strength of this key
    pub fn estimated_strength(&self) -> Result<usize> {
        botan_usize!(botan_pubkey_estimated_strength, self.obj)
    }

    /// Check key for problems
    pub fn check_key(&self, rng: &mut RandomNumberGenerator) -> Result<bool> {
        let flags = 1u32;
        let rc = unsafe { botan_pubkey_check_key(self.obj, rng.handle(), flags) };

        if rc == 0 {
            Ok(true)
        } else if rc == -1 {
            Ok(false)
        } else {
            Err(Error::from_rc(rc))
        }
    }

    /// Return hash of the public key data
    pub fn fingerprint(&self, hash: &str) -> Result<Vec<u8>> {
        let hash = make_cstr(hash)?;
        let fprint_len = 64; // hashes > 512 bits are rare
        call_botan_ffi_returning_vec_u8(fprint_len, &|out_buf, out_len| unsafe {
            botan_pubkey_fingerprint(self.obj, hash.as_ptr(), out_buf, out_len)
        })
    }

    /// DER encode this public key
    pub fn der_encode(&self) -> Result<Vec<u8>> {
        #[cfg(feature = "botan3")]
        {
            call_botan_ffi_viewing_vec_u8(&|ctx, cb| unsafe {
                botan_pubkey_view_der(self.obj, ctx, cb)
            })
        }

        #[cfg(not(feature = "botan3"))]
        {
            let der_len = 4096; // fixme
            call_botan_ffi_returning_vec_u8(der_len, &|out_buf, out_len| unsafe {
                botan_pubkey_export(self.obj, out_buf, out_len, 0u32)
            })
        }
    }

    /// PEM encode this public key
    pub fn pem_encode(&self) -> Result<String> {
        #[cfg(feature = "botan3")]
        {
            call_botan_ffi_viewing_str_fn(&|ctx, cb| unsafe {
                botan_pubkey_view_pem(self.obj, ctx, cb)
            })
        }

        #[cfg(not(feature = "botan3"))]
        {
            let pem_len = 4096; // fixme
            call_botan_ffi_returning_string(pem_len, &|out_buf, out_len| unsafe {
                botan_pubkey_export(self.obj, out_buf, out_len, 1u32)
            })
        }
    }

    #[cfg(feature = "botan3")]
    /// Return the encoded elliptic curve point associated with this key
    ///
    /// Only valid for EC based keys
    pub fn ec_public_point(&self) -> Result<Vec<u8>> {
        call_botan_ffi_viewing_vec_u8(&|ctx, cb| unsafe {
            botan_pubkey_view_ec_public_point(self.obj, ctx, cb)
        })
    }

    /// Return the name of the algorithm
    pub fn algo_name(&self) -> Result<String> {
        call_botan_ffi_returning_string(32, &|out_buf, out_len| unsafe {
            botan_pubkey_algo_name(self.obj, out_buf as *mut c_char, out_len)
        })
    }

    /// Get a value for the public key
    /// The which parameter selects a field which is algorithm specific
    pub fn get_field(&self, which: &str) -> Result<MPI> {
        let which = make_cstr(which)?;

        let r = MPI::new()?;
        botan_call!(botan_pubkey_get_field, r.handle(), self.obj, which.as_ptr())?;
        Ok(r)
    }

    /// Return the 32-byte Ed25519 public key
    pub fn get_ed25519_key(&self) -> Result<Vec<u8>> {
        let mut out = vec![0; 32];

        botan_call!(botan_pubkey_ed25519_get_pubkey, self.obj, out.as_mut_ptr())?;

        Ok(out)
    }

    /// Get the X25519 public key
    pub fn get_x25519_key(&self) -> Result<Vec<u8>> {
        let mut out = vec![0; 32];
        botan_call!(botan_pubkey_x25519_get_pubkey, self.obj, out.as_mut_ptr())?;
        Ok(out)
    }

    #[cfg(feature = "botan3")]
    /// Get an Kyber key
    ///
    /// # Examples
    ///
    /// ```
    /// let v = vec![0x42; 800];
    /// let key = botan::Pubkey::load_kyber(&v).unwrap();
    /// let v2 = key.get_kyber_key().unwrap();
    /// assert_eq!(v, v2);
    /// ```
    /// ```
    /// let v = vec![0x42; 1184];
    /// let key = botan::Pubkey::load_kyber(&v).unwrap();
    /// let v2 = key.get_kyber_key().unwrap();
    /// assert_eq!(v, v2);
    /// ```
    /// ```
    /// let v = vec![0x42; 1568];
    /// let key = botan::Pubkey::load_kyber(&v).unwrap();
    /// let v2 = key.get_kyber_key().unwrap();
    /// assert_eq!(v, v2);
    /// ```
    pub fn get_kyber_key(&self) -> Result<Vec<u8>> {
        call_botan_ffi_viewing_vec_u8(&|ctx, cb| unsafe {
            botan_pubkey_view_kyber_raw_key(self.obj, ctx, cb)
        })
    }

    /// Encrypt a message using the specified padding method
    pub fn encrypt(
        &self,
        message: &[u8],
        padding: &str,
        rng: &mut RandomNumberGenerator,
    ) -> Result<Vec<u8>> {
        let mut op = Encryptor::new(self, padding)?;
        op.encrypt(message, rng)
    }

    /// Verify a message that was signed using the specified padding method
    pub fn verify(&self, message: &[u8], signature: &[u8], padding: &str) -> Result<bool> {
        let mut op = Verifier::new(self, padding)?;
        op.update(message)?;
        op.finish(signature)
    }
}

/// Return the identifier used for PKCS1 v1.5 signatures for the specified hash
pub fn pkcs_hash_id(hash_algo: &str) -> Result<Vec<u8>> {
    let hash_algo = make_cstr(hash_algo)?;
    let id_len = 32; // largest currently is 20 bytes
    call_botan_ffi_returning_vec_u8(id_len, &|out_buf, out_len| unsafe {
        botan_pkcs_hash_id(hash_algo.as_ptr(), out_buf, out_len)
    })
}
